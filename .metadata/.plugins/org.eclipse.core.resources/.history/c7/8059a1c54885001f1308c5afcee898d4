/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "software_timer.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim2;

/* USER CODE BEGIN PV */
int counter = 100;
int counter_led = 100;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t segmentNumber[10] = {0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90};
void display7SEG(int num){
    uint8_t number = segmentNumber[num];
	//Check a nth bit by shifting n times to the right, then bitwise AND it:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, ((number>>0)&0x01));
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, ((number>>1)&0x01));
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, ((number>>2)&0x01));
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, ((number>>3)&0x01));
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, ((number>>4)&0x01));
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, ((number>>5)&0x01));
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, ((number>>6)&0x01));
}

void ex1()
{
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);

	counter--;
	if(counter > 50)
	{
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
		display7SEG(1);
	}
	if(counter <= 50)
	{
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
		display7SEG(2);
		if(counter <= 0)
			counter = 100;
	}
}

void toggle_ex2(int a, int b, int c, int d)
{
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, a);
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, b);
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, c);
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, d);
}

void ex2()
{
	counter--;
	counter_led--;

	if(counter > 150)
	{
		toggle_ex2(0, 1, 1, 1);
		display7SEG(0);
	}
	if(counter <= 150  && counter > 100)
	{
		toggle_ex2(1, 0, 1, 1);
		display7SEG(0);
	}
	if(counter <= 100  && counter > 50)
	{
		toggle_ex2(1, 1, 0, 1);
		display7SEG(3);
	}
	if(counter <= 50)
	{
		toggle_ex2(1, 1, 1, 0);
		display7SEG(0);
		if(counter <= 0)
		{
			counter = 200;
		}

	}

	if(counter_led > 50){
		HAL_GPIO_WritePin(DOT_GPIO_Port, DOT_Pin, 0);
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
	}
	else
	{
		HAL_GPIO_WritePin(DOT_GPIO_Port, DOT_Pin, 1);
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
		if(counter_led<= 0)
			counter_led = 100;
	}
}

const int MAX_LED = 4;
int index_led = 0;
int led_buffer [4] = {1 , 2 , 3 , 4};
void update7SEG ( int index ){
	switch ( index ) {
	  case 0:
		  toggle_ex2(0, 1, 1, 1);
		  display7SEG(led_buffer[0]);
		  break;
	  case 1:
		  toggle_ex2(1, 0, 1, 1);
		  display7SEG(led_buffer[1]);
		  break;
	  case 2:
		  toggle_ex2(1, 1, 0, 1);
		  display7SEG(led_buffer[2]);
		  break;
	  case 3:
		  toggle_ex2(1, 1, 1, 0);
		  display7SEG(led_buffer[3]);
		  break;
	  default:
		  toggle_ex2(0, 1, 1, 1);
		  display7SEG(led_buffer[0]);
		  break;
	}
}

void ex4(){
	if(counter > 0){
	  counter--;
	  if (counter <= 0) {
	    counter = 25;
	    if(index_led >= 4)
	      index_led = 0;
	    update7SEG(index_led);
	    index_led++;
	   }
	 }
	if (counter_led > 0){
	  counter_led--;
	  if(counter_led <= 0){
		  counter_led = 100;
	    HAL_GPIO_TogglePin(DOT_GPIO_Port, DOT_Pin);
	    HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
	    }
	  }
}

int hour = 15, minute = 8, second = 50; //global variables
void updateClockBuffer(){
    //update values for the array led_buffer according to the values of hour and minute.
    led_buffer[0] = hour/10;
    led_buffer[1] = hour%10;
    led_buffer[2] = minute/10;
    led_buffer[3] = minute%10;
}

void ex5_6_7_8()
{
	if(timer1_flag == 1)
	{
		setTimer1(100);
	    second++;
	    if (second >= 60){
	        second = 0;
	        minute++;
	    }
	    if(minute >= 60){
	        minute = 0;
	        hour++;
	    }
	    if(hour >=24){
	        hour = 0;
	    }

	}

	if(timer2_flag == 1)
	{
		updateClockBuffer();
		if(index_led >= 4)
			index_led = 0;
		update7SEG(index_led++);
		setTimer2(50);//every 0.5s will move to next LEDs.
	}

	if(timer3_flag == 1)
	{
		setTimer3(100);
	    HAL_GPIO_TogglePin(DOT_GPIO_Port, DOT_Pin);
	    HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);

	}
}
//int index_led_matrix = 0;  // Track current row for matrix update
//int rowToShift = 0;        // Track current row to shift
int index_led_matrix =0;
const int MAX_LED_MATRIX = 8;
uint8_t matrix_buffer[8] = {
    0x18, // Row 0: 00011000 (Top peak)
    0x3C, // Row 1: 00111100 (Arch)
    0x66, // Row 2: 01100110 (Sides start)
    0x66, // Row 3: 01100110 (Sides)
    0x7E, // Row 4: 11111111 (Middle bar)
    0x66, // Row 5: 01100110 (Bottom sides width 6)
    0x66, // Row 6: 01100110 (Bottom sides width 6)
    0x66  // Row 7: 01100110 (Bottom sides width 6)
};


//// Helper function to control rows (PB8 to PB15)
//void setRow(int row) {
//    // Reset all rows (PB8 to PB15) to LOW
//    for (int i = 0; i < MAX_LED_MATRIX; i++) {
//        HAL_GPIO_WritePin(GPIOB, (1 << (8 + i)), 1); // Reset all row pins from PB8 to PB15
//    }
//
//    // Activate the specific row (PB8 to PB15)
//    HAL_GPIO_WritePin(GPIOB, (1 << (8 + row)), 0); // Set the specific row HIGH (PB8 + row)
//}

// Helper function to control rows (PB8 to PB15)
void setRow(int row) {
    // Reset all rows (PB8 to PB15) to HIGH
    GPIOB->BSRR = 0xFF00;  // Set PB8 to PB15 to HIGH (1 << 8) to (1 << 15)

    // Activate the specific row (PB8 to PB15)
    GPIOB->BRR = (1 << (8 + row));  // Set the specific row LOW
}


// Helper function to control columns (PA2, PA3 for first two columns and PA10-PA15 for the remaining)
void setColumns(uint8_t col_data) {
    // First two columns (PA2 and PA3)
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, (col_data & 0x01) ? 0 : 1); // Column 0 (PA2)
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, (col_data & 0x02) ? 0 : 1); // Column 1 (PA3)

    // Remaining columns (PA10 to PA15)
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, (col_data & 0x04) ? 0 : 1); // Column 2 (PA10)
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, (col_data & 0x08) ? 0 : 1); // Column 3 (PA11)
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, (col_data & 0x10) ? 0 : 1); // Column 4 (PA12)
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, (col_data & 0x20) ? 0 : 1); // Column 5 (PA13)
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, (col_data & 0x40) ? 0 : 1); // Column 6 (PA14)
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, (col_data & 0x80) ? 0 : 1); // Column 7 (PA15)
}


// Function to update the LED matrix for the current row
void updateLEDMatrix(int index) {
    switch (index) {
        case 0:
            setRow(0);           // Set row 0
            setColumns(matrix_buffer[0]); // Set columns for row 0
            break;
        case 1:
            setRow(1);           // Set row 1
            setColumns(matrix_buffer[1]); // Set columns for row 1
            break;
        case 2:
            setRow(2);           // Set row 2
            setColumns(matrix_buffer[2]); // Set columns for row 2
            break;
        case 3:
            setRow(3);           // Set row 3
            setColumns(matrix_buffer[3]); // Set columns for row 3
            break;
        case 4:
            setRow(4);           // Set row 4
            setColumns(matrix_buffer[4]); // Set columns for row 4
            break;
        case 5:
            setRow(5);           // Set row 5
            setColumns(matrix_buffer[5]); // Set columns for row 5
            break;
        case 6:
            setRow(6);           // Set row 6
            setColumns(matrix_buffer[6]); // Set columns for row 6
            break;
        case 7:
            setRow(7);           // Set row 7
            setColumns(matrix_buffer[7]); // Set columns for row 7
            break;
        default:
            // Handle invalid index case (if necessary)
            break;
    }
}


void shiftLeft() {
    for (int i = 0; i < MAX_LED_MATRIX; i++) {
        uint8_t leftmost_bit = (matrix_buffer[i] & 0x80) >> 7; // Extract the leftmost bit (bit 7)
        matrix_buffer[i] = (matrix_buffer[i] << 1) | leftmost_bit; // Shift left and append the leftmost bit to the rightmost position
    }
}

//void shiftLeft() {
//    // Process row 0
//    uint8_t leftmost_bit_0 = (matrix_buffer[0] & 0x80) >> 7;  // Extract the leftmost bit for row 0
//    matrix_buffer[0] = (matrix_buffer[0] << 1) | leftmost_bit_0;  // Shift left and append the leftmost bit to the rightmost position
//
//    // Process row 1
//    uint8_t leftmost_bit_1 = (matrix_buffer[1] & 0x80) >> 7;  // Extract the leftmost bit for row 1
//    matrix_buffer[1] = (matrix_buffer[1] << 1) | leftmost_bit_1;  // Shift left and append the leftmost bit to the rightmost position
//
//    // Process row 2
//    uint8_t leftmost_bit_2 = (matrix_buffer[2] & 0x80) >> 7;  // Extract the leftmost bit for row 2
//    matrix_buffer[2] = (matrix_buffer[2] << 1) | leftmost_bit_2;  // Shift left and append the leftmost bit to the rightmost position
//
//    // Process row 3
//    uint8_t leftmost_bit_3 = (matrix_buffer[3] & 0x80) >> 7;  // Extract the leftmost bit for row 3
//    matrix_buffer[3] = (matrix_buffer[3] << 1) | leftmost_bit_3;  // Shift left and append the leftmost bit to the rightmost position
//
//    // Process row 4
//    uint8_t leftmost_bit_4 = (matrix_buffer[4] & 0x80) >> 7;  // Extract the leftmost bit for row 4
//    matrix_buffer[4] = (matrix_buffer[4] << 1) | leftmost_bit_4;  // Shift left and append the leftmost bit to the rightmost position
//
//    // Process row 5
//    uint8_t leftmost_bit_5 = (matrix_buffer[5] & 0x80) >> 7;  // Extract the leftmost bit for row 5
//    matrix_buffer[5] = (matrix_buffer[5] << 1) | leftmost_bit_5;  // Shift left and append the leftmost bit to the rightmost position
//
//    // Process row 6
//    uint8_t leftmost_bit_6 = (matrix_buffer[6] & 0x80) >> 7;  // Extract the leftmost bit for row 6
//    matrix_buffer[6] = (matrix_buffer[6] << 1) | leftmost_bit_6;  // Shift left and append the leftmost bit to the rightmost position
//
//    // Process row 7
//    uint8_t leftmost_bit_7 = (matrix_buffer[7] & 0x80) >> 7;  // Extract the leftmost bit for row 7
//    matrix_buffer[7] = (matrix_buffer[7] << 1) | leftmost_bit_7;  // Shift left and append the leftmost bit to the rightmost position
//}


// Manually trigger the display of the next row
void ex9()
{

        updateLEDMatrix(index_led_matrix);   // Update the matrix with the current index
        index_led_matrix++;  // Move to the next row
        if (index_led_matrix >= MAX_LED_MATRIX)
            index_led_matrix = 0;  // Reset index to 0 after all rows are displayed

//        if(timer1_flag == 1)
//        {
//        	setTimer1(100);
//        	shiftLeft();
//        }
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer1(100); //timer for updating time
  setTimer2(110); //timer for 7 SEGMENTS
  setTimer3(112); //timer for LEDs
  HAL_GPIO_WritePin(DOT_GPIO_Port, DOT_Pin, 1);
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);

  while (1)
  {
    /* USER CODE END WHILE */
//	    second++;
//	    if (second >= 60){
//	        second = 0;
//	        minute++;
//	    }
//	    if(minute >= 60){
//	        minute = 0;
//	        hour++;
//	    }
//	    if(hour >=24){
//	        hour = 0;
//	    }
//	    updateClockBuffer();
//	    HAL_Delay(1000);

	  //ex5_6_7_8();
	  ex9();
//	    for (int row = 0; row < MAX_LED_MATRIX; row++) {
//	        setRow(row);                     // Select the current row
//	        setColumns(matrix_buffer[row]);  // Output the corresponding column data
//	        HAL_Delay(1);                    // Small delay for persistence of vision
//	    }
//
//	  ex9();
//      updateLEDMatrix(index);   // Update the matrix with the current index
//
//      index++;  // Move to the next row
//
//      if (index >= MAX_LED_MATRIX) {
//          index = 0;  // Reset index to 0 after all rows are displayed
//      }

      //   Perform shift left animation every 100ms (adjust timing as needed)
//        if (HAL_GetTick() - lastShiftTime >= 100) {
//            shiftLeft();  // Shift the columns left
//            lastShiftTime = HAL_GetTick(); // Update the last shift time
//        }

        HAL_Delay(1);  // Small delay to allow for persistence of vision
//	  displayLetterA();
//	  if (timer1_flag == 1){
//		  setTimer1(1);
//		  updateLEDMatrix(index_matrix);
//		  if (index_matrix == 7) index_matrix =0;
//		  else index_matrix ++;
//	  }
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 7999;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 9;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENM0_Pin|ENM1_Pin|DOT_Pin|LED_RED_Pin
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|ROW2_Pin
                          |ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin
                          |ROW7_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin|ROW0_Pin|ROW1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : ENM0_Pin ENM1_Pin DOT_Pin LED_RED_Pin
                           EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           ENM2_Pin ENM3_Pin ENM4_Pin ENM5_Pin
                           ENM6_Pin ENM7_Pin */
  GPIO_InitStruct.Pin = ENM0_Pin|ENM1_Pin|DOT_Pin|LED_RED_Pin
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin ROW2_Pin
                           ROW3_Pin ROW4_Pin ROW5_Pin ROW6_Pin
                           ROW7_Pin SEG3_Pin SEG4_Pin SEG5_Pin
                           SEG6_Pin ROW0_Pin ROW1_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|ROW2_Pin
                          |ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin
                          |ROW7_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin|ROW0_Pin|ROW1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */
//int counter = 100;
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
//	counter--;
//	if ( counter <= 0) {
//		counter = 100;
//		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin) ;
//	}
	//ex1();
	//ex2();
	//ex4();
	timerRun();
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
