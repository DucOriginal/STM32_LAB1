
LAB3_button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ca0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002dac  08002dac  00012dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dd0  08002dd0  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08002dd0  08002dd0  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002dd0  08002dd0  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dd0  08002dd0  00012dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002dd4  08002dd4  00012dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08002dd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000094  08002e6c  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08002e6c  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a47b  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d67  00000000  00000000  0002a538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b28  00000000  00000000  0002c2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009f8  00000000  00000000  0002cdc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017165  00000000  00000000  0002d7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cda9  00000000  00000000  00044925  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008295a  00000000  00000000  000516ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d4028  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b18  00000000  00000000  000d407c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000094 	.word	0x20000094
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d94 	.word	0x08002d94

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000098 	.word	0x20000098
 8000148:	08002d94 	.word	0x08002d94

0800014c <isButton1Pressed>:
int button2_flag = 0;
int button3_flag = 0;


int isButton1Pressed()
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag == 1)
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
	{
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	200000b0 	.word	0x200000b0

08000170 <isButton2Pressed>:

int isButton2Pressed()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button2_flag == 1)
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
	{
		button2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	200000b4 	.word	0x200000b4

08000194 <isButton3Pressed>:

int isButton3Pressed()
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button3_flag == 1)
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Pressed+0x16>
	{
		button3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	200000b8 	.word	0x200000b8

080001b8 <subKeyProcess1>:

void subKeyProcess1(){
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	button1_flag = 1;
 80001bc:	4b03      	ldr	r3, [pc, #12]	; (80001cc <subKeyProcess1+0x14>)
 80001be:	2201      	movs	r2, #1
 80001c0:	601a      	str	r2, [r3, #0]
}
 80001c2:	bf00      	nop
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bc80      	pop	{r7}
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop
 80001cc:	200000b0 	.word	0x200000b0

080001d0 <subKeyProcess2>:

void subKeyProcess2(){
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
	button2_flag = 1;
 80001d4:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <subKeyProcess2+0x14>)
 80001d6:	2201      	movs	r2, #1
 80001d8:	601a      	str	r2, [r3, #0]
}
 80001da:	bf00      	nop
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	200000b4 	.word	0x200000b4

080001e8 <subKeyProcess3>:

void subKeyProcess3(){
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	button3_flag = 1;
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <subKeyProcess3+0x14>)
 80001ee:	2201      	movs	r2, #1
 80001f0:	601a      	str	r2, [r3, #0]
}
 80001f2:	bf00      	nop
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	200000b8 	.word	0x200000b8

08000200 <getKeyInput>:

void getKeyInput()
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	//////////////////For Button 1////////////////////
	keyReg01 = keyReg11;
 8000204:	4b5c      	ldr	r3, [pc, #368]	; (8000378 <getKeyInput+0x178>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a5c      	ldr	r2, [pc, #368]	; (800037c <getKeyInput+0x17c>)
 800020a:	6013      	str	r3, [r2, #0]
	keyReg11 = keyReg21;
 800020c:	4b5c      	ldr	r3, [pc, #368]	; (8000380 <getKeyInput+0x180>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a59      	ldr	r2, [pc, #356]	; (8000378 <getKeyInput+0x178>)
 8000212:	6013      	str	r3, [r2, #0]
	keyReg21 = HAL_GPIO_ReadPin(Button1_GPIO_Port,Button1_Pin);
 8000214:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000218:	485a      	ldr	r0, [pc, #360]	; (8000384 <getKeyInput+0x184>)
 800021a:	f001 fd8f 	bl	8001d3c <HAL_GPIO_ReadPin>
 800021e:	4603      	mov	r3, r0
 8000220:	461a      	mov	r2, r3
 8000222:	4b57      	ldr	r3, [pc, #348]	; (8000380 <getKeyInput+0x180>)
 8000224:	601a      	str	r2, [r3, #0]

	if((keyReg01 == keyReg11) && (keyReg11 == keyReg21))
 8000226:	4b55      	ldr	r3, [pc, #340]	; (800037c <getKeyInput+0x17c>)
 8000228:	681a      	ldr	r2, [r3, #0]
 800022a:	4b53      	ldr	r3, [pc, #332]	; (8000378 <getKeyInput+0x178>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	429a      	cmp	r2, r3
 8000230:	d125      	bne.n	800027e <getKeyInput+0x7e>
 8000232:	4b51      	ldr	r3, [pc, #324]	; (8000378 <getKeyInput+0x178>)
 8000234:	681a      	ldr	r2, [r3, #0]
 8000236:	4b52      	ldr	r3, [pc, #328]	; (8000380 <getKeyInput+0x180>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	429a      	cmp	r2, r3
 800023c:	d11f      	bne.n	800027e <getKeyInput+0x7e>
	{
		if(keyReg31 != keyReg21)
 800023e:	4b52      	ldr	r3, [pc, #328]	; (8000388 <getKeyInput+0x188>)
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	4b4f      	ldr	r3, [pc, #316]	; (8000380 <getKeyInput+0x180>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	429a      	cmp	r2, r3
 8000248:	d00d      	beq.n	8000266 <getKeyInput+0x66>
		{
			keyReg31 = keyReg21;
 800024a:	4b4d      	ldr	r3, [pc, #308]	; (8000380 <getKeyInput+0x180>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	4a4e      	ldr	r2, [pc, #312]	; (8000388 <getKeyInput+0x188>)
 8000250:	6013      	str	r3, [r2, #0]
			if(keyReg21 == PRESSED_STATE)
 8000252:	4b4b      	ldr	r3, [pc, #300]	; (8000380 <getKeyInput+0x180>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d111      	bne.n	800027e <getKeyInput+0x7e>
			{
				subKeyProcess1();
 800025a:	f7ff ffad 	bl	80001b8 <subKeyProcess1>
				TimerForKeyPress1 = 200;
 800025e:	4b4b      	ldr	r3, [pc, #300]	; (800038c <getKeyInput+0x18c>)
 8000260:	22c8      	movs	r2, #200	; 0xc8
 8000262:	601a      	str	r2, [r3, #0]
 8000264:	e00b      	b.n	800027e <getKeyInput+0x7e>
			}
		}
		else{
			TimerForKeyPress1--;
 8000266:	4b49      	ldr	r3, [pc, #292]	; (800038c <getKeyInput+0x18c>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	3b01      	subs	r3, #1
 800026c:	4a47      	ldr	r2, [pc, #284]	; (800038c <getKeyInput+0x18c>)
 800026e:	6013      	str	r3, [r2, #0]

			if(TimerForKeyPress1 == 0)
 8000270:	4b46      	ldr	r3, [pc, #280]	; (800038c <getKeyInput+0x18c>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d102      	bne.n	800027e <getKeyInput+0x7e>
			{
				//if(keyReg21 == PRESSED_STATE)
					keyReg31 = NORMAL_STATE;
 8000278:	4b43      	ldr	r3, [pc, #268]	; (8000388 <getKeyInput+0x188>)
 800027a:	2201      	movs	r2, #1
 800027c:	601a      	str	r2, [r3, #0]
			}
		}
	}
	//////////////////For Button 2////////////////////
	keyReg02 = keyReg12;
 800027e:	4b44      	ldr	r3, [pc, #272]	; (8000390 <getKeyInput+0x190>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	4a44      	ldr	r2, [pc, #272]	; (8000394 <getKeyInput+0x194>)
 8000284:	6013      	str	r3, [r2, #0]
	keyReg12 = keyReg22;
 8000286:	4b44      	ldr	r3, [pc, #272]	; (8000398 <getKeyInput+0x198>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4a41      	ldr	r2, [pc, #260]	; (8000390 <getKeyInput+0x190>)
 800028c:	6013      	str	r3, [r2, #0]
	keyReg22 = HAL_GPIO_ReadPin(Button2_GPIO_Port,Button2_Pin);
 800028e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000292:	483c      	ldr	r0, [pc, #240]	; (8000384 <getKeyInput+0x184>)
 8000294:	f001 fd52 	bl	8001d3c <HAL_GPIO_ReadPin>
 8000298:	4603      	mov	r3, r0
 800029a:	461a      	mov	r2, r3
 800029c:	4b3e      	ldr	r3, [pc, #248]	; (8000398 <getKeyInput+0x198>)
 800029e:	601a      	str	r2, [r3, #0]

	if((keyReg02 == keyReg12) && (keyReg12 == keyReg22))
 80002a0:	4b3c      	ldr	r3, [pc, #240]	; (8000394 <getKeyInput+0x194>)
 80002a2:	681a      	ldr	r2, [r3, #0]
 80002a4:	4b3a      	ldr	r3, [pc, #232]	; (8000390 <getKeyInput+0x190>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	429a      	cmp	r2, r3
 80002aa:	d125      	bne.n	80002f8 <getKeyInput+0xf8>
 80002ac:	4b38      	ldr	r3, [pc, #224]	; (8000390 <getKeyInput+0x190>)
 80002ae:	681a      	ldr	r2, [r3, #0]
 80002b0:	4b39      	ldr	r3, [pc, #228]	; (8000398 <getKeyInput+0x198>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	429a      	cmp	r2, r3
 80002b6:	d11f      	bne.n	80002f8 <getKeyInput+0xf8>
	{
		if(keyReg32 != keyReg22)
 80002b8:	4b38      	ldr	r3, [pc, #224]	; (800039c <getKeyInput+0x19c>)
 80002ba:	681a      	ldr	r2, [r3, #0]
 80002bc:	4b36      	ldr	r3, [pc, #216]	; (8000398 <getKeyInput+0x198>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	429a      	cmp	r2, r3
 80002c2:	d00d      	beq.n	80002e0 <getKeyInput+0xe0>
		{
			keyReg32 = keyReg22;
 80002c4:	4b34      	ldr	r3, [pc, #208]	; (8000398 <getKeyInput+0x198>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a34      	ldr	r2, [pc, #208]	; (800039c <getKeyInput+0x19c>)
 80002ca:	6013      	str	r3, [r2, #0]
			if(keyReg22 == PRESSED_STATE)
 80002cc:	4b32      	ldr	r3, [pc, #200]	; (8000398 <getKeyInput+0x198>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d111      	bne.n	80002f8 <getKeyInput+0xf8>
			{
				subKeyProcess2();
 80002d4:	f7ff ff7c 	bl	80001d0 <subKeyProcess2>
				TimerForKeyPress2 = 200;
 80002d8:	4b31      	ldr	r3, [pc, #196]	; (80003a0 <getKeyInput+0x1a0>)
 80002da:	22c8      	movs	r2, #200	; 0xc8
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	e00b      	b.n	80002f8 <getKeyInput+0xf8>
			}
		}
		else{
			TimerForKeyPress2--;
 80002e0:	4b2f      	ldr	r3, [pc, #188]	; (80003a0 <getKeyInput+0x1a0>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	3b01      	subs	r3, #1
 80002e6:	4a2e      	ldr	r2, [pc, #184]	; (80003a0 <getKeyInput+0x1a0>)
 80002e8:	6013      	str	r3, [r2, #0]
			if(TimerForKeyPress2 == 0)
 80002ea:	4b2d      	ldr	r3, [pc, #180]	; (80003a0 <getKeyInput+0x1a0>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d102      	bne.n	80002f8 <getKeyInput+0xf8>
			{
				keyReg32 = NORMAL_STATE;
 80002f2:	4b2a      	ldr	r3, [pc, #168]	; (800039c <getKeyInput+0x19c>)
 80002f4:	2201      	movs	r2, #1
 80002f6:	601a      	str	r2, [r3, #0]
			}
		}
	}
	//////////////////For Button 3////////////////////
	keyReg03 = keyReg13;
 80002f8:	4b2a      	ldr	r3, [pc, #168]	; (80003a4 <getKeyInput+0x1a4>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a2a      	ldr	r2, [pc, #168]	; (80003a8 <getKeyInput+0x1a8>)
 80002fe:	6013      	str	r3, [r2, #0]
	keyReg13 = keyReg23;
 8000300:	4b2a      	ldr	r3, [pc, #168]	; (80003ac <getKeyInput+0x1ac>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a27      	ldr	r2, [pc, #156]	; (80003a4 <getKeyInput+0x1a4>)
 8000306:	6013      	str	r3, [r2, #0]
	keyReg23 = HAL_GPIO_ReadPin(Button3_GPIO_Port,Button3_Pin);
 8000308:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800030c:	481d      	ldr	r0, [pc, #116]	; (8000384 <getKeyInput+0x184>)
 800030e:	f001 fd15 	bl	8001d3c <HAL_GPIO_ReadPin>
 8000312:	4603      	mov	r3, r0
 8000314:	461a      	mov	r2, r3
 8000316:	4b25      	ldr	r3, [pc, #148]	; (80003ac <getKeyInput+0x1ac>)
 8000318:	601a      	str	r2, [r3, #0]

	if((keyReg03 == keyReg13) && (keyReg13 == keyReg23))
 800031a:	4b23      	ldr	r3, [pc, #140]	; (80003a8 <getKeyInput+0x1a8>)
 800031c:	681a      	ldr	r2, [r3, #0]
 800031e:	4b21      	ldr	r3, [pc, #132]	; (80003a4 <getKeyInput+0x1a4>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	429a      	cmp	r2, r3
 8000324:	d125      	bne.n	8000372 <getKeyInput+0x172>
 8000326:	4b1f      	ldr	r3, [pc, #124]	; (80003a4 <getKeyInput+0x1a4>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	4b20      	ldr	r3, [pc, #128]	; (80003ac <getKeyInput+0x1ac>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	429a      	cmp	r2, r3
 8000330:	d11f      	bne.n	8000372 <getKeyInput+0x172>
	{
		if(keyReg33 != keyReg23)
 8000332:	4b1f      	ldr	r3, [pc, #124]	; (80003b0 <getKeyInput+0x1b0>)
 8000334:	681a      	ldr	r2, [r3, #0]
 8000336:	4b1d      	ldr	r3, [pc, #116]	; (80003ac <getKeyInput+0x1ac>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	429a      	cmp	r2, r3
 800033c:	d00d      	beq.n	800035a <getKeyInput+0x15a>
		{
			keyReg33 = keyReg23;
 800033e:	4b1b      	ldr	r3, [pc, #108]	; (80003ac <getKeyInput+0x1ac>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4a1b      	ldr	r2, [pc, #108]	; (80003b0 <getKeyInput+0x1b0>)
 8000344:	6013      	str	r3, [r2, #0]
			if(keyReg23 == PRESSED_STATE)
 8000346:	4b19      	ldr	r3, [pc, #100]	; (80003ac <getKeyInput+0x1ac>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d111      	bne.n	8000372 <getKeyInput+0x172>
			{
				subKeyProcess3();
 800034e:	f7ff ff4b 	bl	80001e8 <subKeyProcess3>
				TimerForKeyPress3 = 200;
 8000352:	4b18      	ldr	r3, [pc, #96]	; (80003b4 <getKeyInput+0x1b4>)
 8000354:	22c8      	movs	r2, #200	; 0xc8
 8000356:	601a      	str	r2, [r3, #0]
				keyReg33 = NORMAL_STATE;
			}
		}
	}

}
 8000358:	e00b      	b.n	8000372 <getKeyInput+0x172>
			TimerForKeyPress3--;
 800035a:	4b16      	ldr	r3, [pc, #88]	; (80003b4 <getKeyInput+0x1b4>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	3b01      	subs	r3, #1
 8000360:	4a14      	ldr	r2, [pc, #80]	; (80003b4 <getKeyInput+0x1b4>)
 8000362:	6013      	str	r3, [r2, #0]
			if(TimerForKeyPress3 == 0)
 8000364:	4b13      	ldr	r3, [pc, #76]	; (80003b4 <getKeyInput+0x1b4>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d102      	bne.n	8000372 <getKeyInput+0x172>
				keyReg33 = NORMAL_STATE;
 800036c:	4b10      	ldr	r3, [pc, #64]	; (80003b0 <getKeyInput+0x1b0>)
 800036e:	2201      	movs	r2, #1
 8000370:	601a      	str	r2, [r3, #0]
}
 8000372:	bf00      	nop
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	20000144 	.word	0x20000144
 800037c:	2000013c 	.word	0x2000013c
 8000380:	20000134 	.word	0x20000134
 8000384:	40011000 	.word	0x40011000
 8000388:	20000138 	.word	0x20000138
 800038c:	20000010 	.word	0x20000010
 8000390:	2000012c 	.word	0x2000012c
 8000394:	2000014c 	.word	0x2000014c
 8000398:	20000128 	.word	0x20000128
 800039c:	20000148 	.word	0x20000148
 80003a0:	20000014 	.word	0x20000014
 80003a4:	20000004 	.word	0x20000004
 80003a8:	20000000 	.word	0x20000000
 80003ac:	20000008 	.word	0x20000008
 80003b0:	2000000c 	.word	0x2000000c
 80003b4:	20000018 	.word	0x20000018

080003b8 <fsm_automatic_run>:
 */

#include "fsm_automatic.h"

void fsm_automatic_run()
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
	set7LED(); // Display all 4 7-SEG Leds
 80003bc:	f000 fd24 	bl	8000e08 <set7LED>

	// Set up Traffic 1
	switch(status1){
 80003c0:	4b6d      	ldr	r3, [pc, #436]	; (8000578 <fsm_automatic_run+0x1c0>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	3b01      	subs	r3, #1
 80003c6:	2b03      	cmp	r3, #3
 80003c8:	d864      	bhi.n	8000494 <fsm_automatic_run+0xdc>
 80003ca:	a201      	add	r2, pc, #4	; (adr r2, 80003d0 <fsm_automatic_run+0x18>)
 80003cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003d0:	080003e1 	.word	0x080003e1
 80003d4:	080003ff 	.word	0x080003ff
 80003d8:	08000431 	.word	0x08000431
 80003dc:	08000463 	.word	0x08000463
		case INIT:
			initial1();
 80003e0:	f001 f886 	bl	80014f0 <initial1>
			status1 = AUTO_RED; //change INIT to AUTO_RED
 80003e4:	4b64      	ldr	r3, [pc, #400]	; (8000578 <fsm_automatic_run+0x1c0>)
 80003e6:	2202      	movs	r2, #2
 80003e8:	601a      	str	r2, [r3, #0]
			counter_7seg1 = counter_red; //counter_7seg1 displays the Traffic 1's 7-LEDs.
 80003ea:	4b64      	ldr	r3, [pc, #400]	; (800057c <fsm_automatic_run+0x1c4>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	4a64      	ldr	r2, [pc, #400]	; (8000580 <fsm_automatic_run+0x1c8>)
 80003f0:	6013      	str	r3, [r2, #0]
			setTimer1(counter_red);
 80003f2:	4b62      	ldr	r3, [pc, #392]	; (800057c <fsm_automatic_run+0x1c4>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4618      	mov	r0, r3
 80003f8:	f000 fe74 	bl	80010e4 <setTimer1>
			break;
 80003fc:	e051      	b.n	80004a2 <fsm_automatic_run+0xea>
		case AUTO_RED:
			setRED1(); //turn on red led.
 80003fe:	f001 f8a3 	bl	8001548 <setRED1>
			if(timer1_flag == 1)
 8000402:	4b60      	ldr	r3, [pc, #384]	; (8000584 <fsm_automatic_run+0x1cc>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	2b01      	cmp	r3, #1
 8000408:	d107      	bne.n	800041a <fsm_automatic_run+0x62>
			{
				status1 = AUTO_GRE;
 800040a:	4b5b      	ldr	r3, [pc, #364]	; (8000578 <fsm_automatic_run+0x1c0>)
 800040c:	2204      	movs	r2, #4
 800040e:	601a      	str	r2, [r3, #0]
				setTimer1(counter_gre);
 8000410:	4b5d      	ldr	r3, [pc, #372]	; (8000588 <fsm_automatic_run+0x1d0>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4618      	mov	r0, r3
 8000416:	f000 fe65 	bl	80010e4 <setTimer1>
			}
			//if Button 1 is pressed, it moves on MODE1:
			if(isButton1Pressed() == 1)
 800041a:	f7ff fe97 	bl	800014c <isButton1Pressed>
 800041e:	4603      	mov	r3, r0
 8000420:	2b01      	cmp	r3, #1
 8000422:	d139      	bne.n	8000498 <fsm_automatic_run+0xe0>
			{
				//if mode1_flag = 1, it will be MODE1,
				//else if mode1_flag  = 2, it will be MODE 2
				mode1_flag++;
 8000424:	4b59      	ldr	r3, [pc, #356]	; (800058c <fsm_automatic_run+0x1d4>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	3301      	adds	r3, #1
 800042a:	4a58      	ldr	r2, [pc, #352]	; (800058c <fsm_automatic_run+0x1d4>)
 800042c:	6013      	str	r3, [r2, #0]
			}
			break;
 800042e:	e033      	b.n	8000498 <fsm_automatic_run+0xe0>
		case AUTO_YEL:
			setYEL1();
 8000430:	f001 f8b6 	bl	80015a0 <setYEL1>
			if(timer1_flag == 1)
 8000434:	4b53      	ldr	r3, [pc, #332]	; (8000584 <fsm_automatic_run+0x1cc>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	2b01      	cmp	r3, #1
 800043a:	d107      	bne.n	800044c <fsm_automatic_run+0x94>
			{
				status1 = AUTO_RED;
 800043c:	4b4e      	ldr	r3, [pc, #312]	; (8000578 <fsm_automatic_run+0x1c0>)
 800043e:	2202      	movs	r2, #2
 8000440:	601a      	str	r2, [r3, #0]
				setTimer1(counter_red);
 8000442:	4b4e      	ldr	r3, [pc, #312]	; (800057c <fsm_automatic_run+0x1c4>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4618      	mov	r0, r3
 8000448:	f000 fe4c 	bl	80010e4 <setTimer1>
			}
			if(isButton1Pressed() == 1)
 800044c:	f7ff fe7e 	bl	800014c <isButton1Pressed>
 8000450:	4603      	mov	r3, r0
 8000452:	2b01      	cmp	r3, #1
 8000454:	d122      	bne.n	800049c <fsm_automatic_run+0xe4>
			{
				mode1_flag++;
 8000456:	4b4d      	ldr	r3, [pc, #308]	; (800058c <fsm_automatic_run+0x1d4>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	3301      	adds	r3, #1
 800045c:	4a4b      	ldr	r2, [pc, #300]	; (800058c <fsm_automatic_run+0x1d4>)
 800045e:	6013      	str	r3, [r2, #0]
			}
			break;
 8000460:	e01c      	b.n	800049c <fsm_automatic_run+0xe4>
		case AUTO_GRE:
			setGRE1();
 8000462:	f001 f8c9 	bl	80015f8 <setGRE1>
			if(timer1_flag == 1)
 8000466:	4b47      	ldr	r3, [pc, #284]	; (8000584 <fsm_automatic_run+0x1cc>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	2b01      	cmp	r3, #1
 800046c:	d107      	bne.n	800047e <fsm_automatic_run+0xc6>
			{

				status1 = AUTO_YEL;
 800046e:	4b42      	ldr	r3, [pc, #264]	; (8000578 <fsm_automatic_run+0x1c0>)
 8000470:	2203      	movs	r2, #3
 8000472:	601a      	str	r2, [r3, #0]
				setTimer1(counter_yel);
 8000474:	4b46      	ldr	r3, [pc, #280]	; (8000590 <fsm_automatic_run+0x1d8>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4618      	mov	r0, r3
 800047a:	f000 fe33 	bl	80010e4 <setTimer1>
			}
			if(isButton1Pressed() == 1)
 800047e:	f7ff fe65 	bl	800014c <isButton1Pressed>
 8000482:	4603      	mov	r3, r0
 8000484:	2b01      	cmp	r3, #1
 8000486:	d10b      	bne.n	80004a0 <fsm_automatic_run+0xe8>
			{
				mode1_flag++;
 8000488:	4b40      	ldr	r3, [pc, #256]	; (800058c <fsm_automatic_run+0x1d4>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	3301      	adds	r3, #1
 800048e:	4a3f      	ldr	r2, [pc, #252]	; (800058c <fsm_automatic_run+0x1d4>)
 8000490:	6013      	str	r3, [r2, #0]
			}
			break;
 8000492:	e005      	b.n	80004a0 <fsm_automatic_run+0xe8>
		default:
			break;
 8000494:	bf00      	nop
 8000496:	e004      	b.n	80004a2 <fsm_automatic_run+0xea>
			break;
 8000498:	bf00      	nop
 800049a:	e002      	b.n	80004a2 <fsm_automatic_run+0xea>
			break;
 800049c:	bf00      	nop
 800049e:	e000      	b.n	80004a2 <fsm_automatic_run+0xea>
			break;
 80004a0:	bf00      	nop

	}
//-------------------------------------------------
	// Set up Traffic 2
	switch(status2){
 80004a2:	4b3c      	ldr	r3, [pc, #240]	; (8000594 <fsm_automatic_run+0x1dc>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	3b01      	subs	r3, #1
 80004a8:	2b03      	cmp	r3, #3
 80004aa:	d847      	bhi.n	800053c <fsm_automatic_run+0x184>
 80004ac:	a201      	add	r2, pc, #4	; (adr r2, 80004b4 <fsm_automatic_run+0xfc>)
 80004ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004b2:	bf00      	nop
 80004b4:	080004c5 	.word	0x080004c5
 80004b8:	080004e3 	.word	0x080004e3
 80004bc:	08000501 	.word	0x08000501
 80004c0:	0800051f 	.word	0x0800051f
		case INIT:
			initial2();
 80004c4:	f001 f82a 	bl	800151c <initial2>
			status2 = AUTO_GRE;
 80004c8:	4b32      	ldr	r3, [pc, #200]	; (8000594 <fsm_automatic_run+0x1dc>)
 80004ca:	2204      	movs	r2, #4
 80004cc:	601a      	str	r2, [r3, #0]
			counter_7seg2 = counter_gre;
 80004ce:	4b2e      	ldr	r3, [pc, #184]	; (8000588 <fsm_automatic_run+0x1d0>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a31      	ldr	r2, [pc, #196]	; (8000598 <fsm_automatic_run+0x1e0>)
 80004d4:	6013      	str	r3, [r2, #0]
			setTimer2(counter_gre);
 80004d6:	4b2c      	ldr	r3, [pc, #176]	; (8000588 <fsm_automatic_run+0x1d0>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4618      	mov	r0, r3
 80004dc:	f000 fe18 	bl	8001110 <setTimer2>
			break;
 80004e0:	e033      	b.n	800054a <fsm_automatic_run+0x192>
		case AUTO_RED:
			setRED2();
 80004e2:	f001 f847 	bl	8001574 <setRED2>
			if(timer2_flag == 1)
 80004e6:	4b2d      	ldr	r3, [pc, #180]	; (800059c <fsm_automatic_run+0x1e4>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	2b01      	cmp	r3, #1
 80004ec:	d128      	bne.n	8000540 <fsm_automatic_run+0x188>
			{
				status2 = AUTO_GRE;
 80004ee:	4b29      	ldr	r3, [pc, #164]	; (8000594 <fsm_automatic_run+0x1dc>)
 80004f0:	2204      	movs	r2, #4
 80004f2:	601a      	str	r2, [r3, #0]
				setTimer2(counter_gre);
 80004f4:	4b24      	ldr	r3, [pc, #144]	; (8000588 <fsm_automatic_run+0x1d0>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4618      	mov	r0, r3
 80004fa:	f000 fe09 	bl	8001110 <setTimer2>
			}
			break;
 80004fe:	e01f      	b.n	8000540 <fsm_automatic_run+0x188>
		case AUTO_YEL:
			setYEL2();
 8000500:	f001 f864 	bl	80015cc <setYEL2>
			if(timer2_flag == 1)
 8000504:	4b25      	ldr	r3, [pc, #148]	; (800059c <fsm_automatic_run+0x1e4>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	2b01      	cmp	r3, #1
 800050a:	d11b      	bne.n	8000544 <fsm_automatic_run+0x18c>
			{
				status2 = AUTO_RED;
 800050c:	4b21      	ldr	r3, [pc, #132]	; (8000594 <fsm_automatic_run+0x1dc>)
 800050e:	2202      	movs	r2, #2
 8000510:	601a      	str	r2, [r3, #0]
				setTimer2(counter_red);
 8000512:	4b1a      	ldr	r3, [pc, #104]	; (800057c <fsm_automatic_run+0x1c4>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4618      	mov	r0, r3
 8000518:	f000 fdfa 	bl	8001110 <setTimer2>
			}
			break;
 800051c:	e012      	b.n	8000544 <fsm_automatic_run+0x18c>
		case AUTO_GRE:
			setGRE2();
 800051e:	f001 f881 	bl	8001624 <setGRE2>
			if(timer2_flag == 1)
 8000522:	4b1e      	ldr	r3, [pc, #120]	; (800059c <fsm_automatic_run+0x1e4>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	2b01      	cmp	r3, #1
 8000528:	d10e      	bne.n	8000548 <fsm_automatic_run+0x190>
			{
				status2 = AUTO_YEL;
 800052a:	4b1a      	ldr	r3, [pc, #104]	; (8000594 <fsm_automatic_run+0x1dc>)
 800052c:	2203      	movs	r2, #3
 800052e:	601a      	str	r2, [r3, #0]
				setTimer2(counter_yel);
 8000530:	4b17      	ldr	r3, [pc, #92]	; (8000590 <fsm_automatic_run+0x1d8>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4618      	mov	r0, r3
 8000536:	f000 fdeb 	bl	8001110 <setTimer2>
			}
			break;
 800053a:	e005      	b.n	8000548 <fsm_automatic_run+0x190>
		default:
			break;
 800053c:	bf00      	nop
 800053e:	e004      	b.n	800054a <fsm_automatic_run+0x192>
			break;
 8000540:	bf00      	nop
 8000542:	e002      	b.n	800054a <fsm_automatic_run+0x192>
			break;
 8000544:	bf00      	nop
 8000546:	e000      	b.n	800054a <fsm_automatic_run+0x192>
			break;
 8000548:	bf00      	nop
///////////////////////////////////////////////////////////
	//We don't need set mode1_flag for Traffic 2.
	//With mode1_flag = 1, it will change from the AUTO state to the MODE state.
	//At MODE1, there is nothing changed. It means that it runs normally.
	//At MODE2, it means mode1_flag = 2, the system change MODE1 to MODE2.
	if(mode1_flag ==2)
 800054a:	4b10      	ldr	r3, [pc, #64]	; (800058c <fsm_automatic_run+0x1d4>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	2b02      	cmp	r3, #2
 8000550:	d110      	bne.n	8000574 <fsm_automatic_run+0x1bc>
	{
		status_manual = MODE1;
 8000552:	4b13      	ldr	r3, [pc, #76]	; (80005a0 <fsm_automatic_run+0x1e8>)
 8000554:	220b      	movs	r2, #11
 8000556:	601a      	str	r2, [r3, #0]
		status1 = status2 = status_manual;
 8000558:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <fsm_automatic_run+0x1e8>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a0d      	ldr	r2, [pc, #52]	; (8000594 <fsm_automatic_run+0x1dc>)
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <fsm_automatic_run+0x1dc>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a04      	ldr	r2, [pc, #16]	; (8000578 <fsm_automatic_run+0x1c0>)
 8000566:	6013      	str	r3, [r2, #0]
		setTimer1(0);
 8000568:	2000      	movs	r0, #0
 800056a:	f000 fdbb 	bl	80010e4 <setTimer1>
		setTimer2(0);
 800056e:	2000      	movs	r0, #0
 8000570:	f000 fdce 	bl	8001110 <setTimer2>
	}
}
 8000574:	bf00      	nop
 8000576:	bd80      	pop	{r7, pc}
 8000578:	200000bc 	.word	0x200000bc
 800057c:	2000007c 	.word	0x2000007c
 8000580:	200000d4 	.word	0x200000d4
 8000584:	200000ec 	.word	0x200000ec
 8000588:	20000084 	.word	0x20000084
 800058c:	200000c8 	.word	0x200000c8
 8000590:	20000080 	.word	0x20000080
 8000594:	200000c0 	.word	0x200000c0
 8000598:	200000d8 	.word	0x200000d8
 800059c:	200000f4 	.word	0x200000f4
 80005a0:	200000c4 	.word	0x200000c4

080005a4 <fsm_manual_run>:


#include "fsm_manual.h"

void fsm_manual_run()
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	set7LED();
 80005a8:	f000 fc2e 	bl	8000e08 <set7LED>
	switch(status_manual)
 80005ac:	4b9e      	ldr	r3, [pc, #632]	; (8000828 <fsm_manual_run+0x284>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	3b05      	subs	r3, #5
 80005b2:	2b06      	cmp	r3, #6
 80005b4:	f200 8173 	bhi.w	800089e <fsm_manual_run+0x2fa>
 80005b8:	a201      	add	r2, pc, #4	; (adr r2, 80005c0 <fsm_manual_run+0x1c>)
 80005ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005be:	bf00      	nop
 80005c0:	080005fb 	.word	0x080005fb
 80005c4:	080006cb 	.word	0x080006cb
 80005c8:	0800079b 	.word	0x0800079b
 80005cc:	0800089f 	.word	0x0800089f
 80005d0:	0800089f 	.word	0x0800089f
 80005d4:	0800089f 	.word	0x0800089f
 80005d8:	080005dd 	.word	0x080005dd
	{
		case MODE1:
			//Check status to see whether it is on MODE1 or MODE2.
			//mode1_flag  = 1 -> MODE1 else MODE2
			mode1_flag = 1;
 80005dc:	4b93      	ldr	r3, [pc, #588]	; (800082c <fsm_manual_run+0x288>)
 80005de:	2201      	movs	r2, #1
 80005e0:	601a      	str	r2, [r3, #0]
			first_press = 0; //check whether button 2 is pressed first or not.
 80005e2:	4b93      	ldr	r3, [pc, #588]	; (8000830 <fsm_manual_run+0x28c>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
			counter_7seg1 = 1; // display value
 80005e8:	4b92      	ldr	r3, [pc, #584]	; (8000834 <fsm_manual_run+0x290>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	601a      	str	r2, [r3, #0]
			TurnOnRed(); //Set timer for blinking all red LEDs. [0.5s]
 80005ee:	f000 fe09 	bl	8001204 <TurnOnRed>
			status_manual = MODE2; // move to MODE 2
 80005f2:	4b8d      	ldr	r3, [pc, #564]	; (8000828 <fsm_manual_run+0x284>)
 80005f4:	2205      	movs	r2, #5
 80005f6:	601a      	str	r2, [r3, #0]
			break;
 80005f8:	e158      	b.n	80008ac <fsm_manual_run+0x308>
		case MODE2:
			counter_7seg2 = 2; //display mode
 80005fa:	4b8f      	ldr	r3, [pc, #572]	; (8000838 <fsm_manual_run+0x294>)
 80005fc:	2202      	movs	r2, #2
 80005fe:	601a      	str	r2, [r3, #0]
			if(timerLedRed_flag == 1)
 8000600:	4b8e      	ldr	r3, [pc, #568]	; (800083c <fsm_manual_run+0x298>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d108      	bne.n	800061a <fsm_manual_run+0x76>
			{
				blinkRED();
 8000608:	f001 f822 	bl	8001650 <blinkRED>
				idle_counter++;
 800060c:	4b8c      	ldr	r3, [pc, #560]	; (8000840 <fsm_manual_run+0x29c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	3301      	adds	r3, #1
 8000612:	4a8b      	ldr	r2, [pc, #556]	; (8000840 <fsm_manual_run+0x29c>)
 8000614:	6013      	str	r3, [r2, #0]
				TurnOnRed();
 8000616:	f000 fdf5 	bl	8001204 <TurnOnRed>
			}
			//if the system doesn't receive any signal, it will move to MODE1 (in essence, the AUTO mode) after 10s.
			if(idle_counter >= 20)
 800061a:	4b89      	ldr	r3, [pc, #548]	; (8000840 <fsm_manual_run+0x29c>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2b13      	cmp	r3, #19
 8000620:	dd0b      	ble.n	800063a <fsm_manual_run+0x96>
			{
				idle_counter = 0; // check the idle status.
 8000622:	4b87      	ldr	r3, [pc, #540]	; (8000840 <fsm_manual_run+0x29c>)
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
				mode1_flag = 1;
 8000628:	4b80      	ldr	r3, [pc, #512]	; (800082c <fsm_manual_run+0x288>)
 800062a:	2201      	movs	r2, #1
 800062c:	601a      	str	r2, [r3, #0]
				status1 = INIT;
 800062e:	4b85      	ldr	r3, [pc, #532]	; (8000844 <fsm_manual_run+0x2a0>)
 8000630:	2201      	movs	r2, #1
 8000632:	601a      	str	r2, [r3, #0]
				status2 = INIT;
 8000634:	4b84      	ldr	r3, [pc, #528]	; (8000848 <fsm_manual_run+0x2a4>)
 8000636:	2201      	movs	r2, #1
 8000638:	601a      	str	r2, [r3, #0]
			}
			if(isButton1Pressed() == 1)
 800063a:	f7ff fd87 	bl	800014c <isButton1Pressed>
 800063e:	4603      	mov	r3, r0
 8000640:	2b01      	cmp	r3, #1
 8000642:	d10d      	bne.n	8000660 <fsm_manual_run+0xbc>
			{
				//change to the next mode.
				first_press = 0;
 8000644:	4b7a      	ldr	r3, [pc, #488]	; (8000830 <fsm_manual_run+0x28c>)
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
				idle_counter = 0;
 800064a:	4b7d      	ldr	r3, [pc, #500]	; (8000840 <fsm_manual_run+0x29c>)
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
				counter_7seg1 = 1;
 8000650:	4b78      	ldr	r3, [pc, #480]	; (8000834 <fsm_manual_run+0x290>)
 8000652:	2201      	movs	r2, #1
 8000654:	601a      	str	r2, [r3, #0]
				TurnOnYel();
 8000656:	f000 fde2 	bl	800121e <TurnOnYel>
				status_manual = MODE3;
 800065a:	4b73      	ldr	r3, [pc, #460]	; (8000828 <fsm_manual_run+0x284>)
 800065c:	2206      	movs	r2, #6
 800065e:	601a      	str	r2, [r3, #0]
			}
			if(isButton2Pressed() == 1)
 8000660:	f7ff fd86 	bl	8000170 <isButton2Pressed>
 8000664:	4603      	mov	r3, r0
 8000666:	2b01      	cmp	r3, #1
 8000668:	d121      	bne.n	80006ae <fsm_manual_run+0x10a>
			{
				//if button 2 is pressed at the first time, the value is 2.
				//Because of changing mode, the value is 1 in default.
				if(first_press == 0)
 800066a:	4b71      	ldr	r3, [pc, #452]	; (8000830 <fsm_manual_run+0x28c>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d106      	bne.n	8000680 <fsm_manual_run+0xdc>
				{
					counter_7seg1 = 2;
 8000672:	4b70      	ldr	r3, [pc, #448]	; (8000834 <fsm_manual_run+0x290>)
 8000674:	2202      	movs	r2, #2
 8000676:	601a      	str	r2, [r3, #0]
					first_press = 1;
 8000678:	4b6d      	ldr	r3, [pc, #436]	; (8000830 <fsm_manual_run+0x28c>)
 800067a:	2201      	movs	r2, #1
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	e004      	b.n	800068a <fsm_manual_run+0xe6>
				}
				else // count up the value by 1.
					counter_7seg1++;
 8000680:	4b6c      	ldr	r3, [pc, #432]	; (8000834 <fsm_manual_run+0x290>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	3301      	adds	r3, #1
 8000686:	4a6b      	ldr	r2, [pc, #428]	; (8000834 <fsm_manual_run+0x290>)
 8000688:	6013      	str	r3, [r2, #0]

				// if the value is up to 100, it changes to 1.
				if(counter_7seg1 >= 100)
 800068a:	4b6a      	ldr	r3, [pc, #424]	; (8000834 <fsm_manual_run+0x290>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2b63      	cmp	r3, #99	; 0x63
 8000690:	dd02      	ble.n	8000698 <fsm_manual_run+0xf4>
				{
					counter_7seg1 = 1;
 8000692:	4b68      	ldr	r3, [pc, #416]	; (8000834 <fsm_manual_run+0x290>)
 8000694:	2201      	movs	r2, #1
 8000696:	601a      	str	r2, [r3, #0]
				}
				counter_7seg2 = 2; // display mode.
 8000698:	4b67      	ldr	r3, [pc, #412]	; (8000838 <fsm_manual_run+0x294>)
 800069a:	2202      	movs	r2, #2
 800069c:	601a      	str	r2, [r3, #0]
				idle_counter = 0;
 800069e:	4b68      	ldr	r3, [pc, #416]	; (8000840 <fsm_manual_run+0x29c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
				TurnOnRed();
 80006a4:	f000 fdae 	bl	8001204 <TurnOnRed>
				status_manual = MODE2;
 80006a8:	4b5f      	ldr	r3, [pc, #380]	; (8000828 <fsm_manual_run+0x284>)
 80006aa:	2205      	movs	r2, #5
 80006ac:	601a      	str	r2, [r3, #0]

			}
			if(isButton3Pressed() == 1)
 80006ae:	f7ff fd71 	bl	8000194 <isButton3Pressed>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	f040 80f4 	bne.w	80008a2 <fsm_manual_run+0x2fe>
			{
				//if button 3 is pressed , set the timer for red led.
				counter_red = counter_7seg1;
 80006ba:	4b5e      	ldr	r3, [pc, #376]	; (8000834 <fsm_manual_run+0x290>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a63      	ldr	r2, [pc, #396]	; (800084c <fsm_manual_run+0x2a8>)
 80006c0:	6013      	str	r3, [r2, #0]
				status_manual = MODE2;
 80006c2:	4b59      	ldr	r3, [pc, #356]	; (8000828 <fsm_manual_run+0x284>)
 80006c4:	2205      	movs	r2, #5
 80006c6:	601a      	str	r2, [r3, #0]
			}
			break;
 80006c8:	e0eb      	b.n	80008a2 <fsm_manual_run+0x2fe>
		case MODE3:
			counter_7seg2 = 3;
 80006ca:	4b5b      	ldr	r3, [pc, #364]	; (8000838 <fsm_manual_run+0x294>)
 80006cc:	2203      	movs	r2, #3
 80006ce:	601a      	str	r2, [r3, #0]
			if(timerLedYel_flag == 1)
 80006d0:	4b5f      	ldr	r3, [pc, #380]	; (8000850 <fsm_manual_run+0x2ac>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d108      	bne.n	80006ea <fsm_manual_run+0x146>
			{
				blinkYEL();
 80006d8:	f000 ffdc 	bl	8001694 <blinkYEL>
				idle_counter++;
 80006dc:	4b58      	ldr	r3, [pc, #352]	; (8000840 <fsm_manual_run+0x29c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	3301      	adds	r3, #1
 80006e2:	4a57      	ldr	r2, [pc, #348]	; (8000840 <fsm_manual_run+0x29c>)
 80006e4:	6013      	str	r3, [r2, #0]
				TurnOnYel();
 80006e6:	f000 fd9a 	bl	800121e <TurnOnYel>
			}
			if(idle_counter >= 20)
 80006ea:	4b55      	ldr	r3, [pc, #340]	; (8000840 <fsm_manual_run+0x29c>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2b13      	cmp	r3, #19
 80006f0:	dd0b      	ble.n	800070a <fsm_manual_run+0x166>
			{
				idle_counter = 0;
 80006f2:	4b53      	ldr	r3, [pc, #332]	; (8000840 <fsm_manual_run+0x29c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
				mode1_flag =1;
 80006f8:	4b4c      	ldr	r3, [pc, #304]	; (800082c <fsm_manual_run+0x288>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	601a      	str	r2, [r3, #0]
				status1 = INIT;
 80006fe:	4b51      	ldr	r3, [pc, #324]	; (8000844 <fsm_manual_run+0x2a0>)
 8000700:	2201      	movs	r2, #1
 8000702:	601a      	str	r2, [r3, #0]
				status2 = INIT;
 8000704:	4b50      	ldr	r3, [pc, #320]	; (8000848 <fsm_manual_run+0x2a4>)
 8000706:	2201      	movs	r2, #1
 8000708:	601a      	str	r2, [r3, #0]
			}
			if(isButton1Pressed() == 1)
 800070a:	f7ff fd1f 	bl	800014c <isButton1Pressed>
 800070e:	4603      	mov	r3, r0
 8000710:	2b01      	cmp	r3, #1
 8000712:	d10d      	bne.n	8000730 <fsm_manual_run+0x18c>
			{
				idle_counter = 0;
 8000714:	4b4a      	ldr	r3, [pc, #296]	; (8000840 <fsm_manual_run+0x29c>)
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
				first_press = 0;
 800071a:	4b45      	ldr	r3, [pc, #276]	; (8000830 <fsm_manual_run+0x28c>)
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
				counter_7seg1 = 1;
 8000720:	4b44      	ldr	r3, [pc, #272]	; (8000834 <fsm_manual_run+0x290>)
 8000722:	2201      	movs	r2, #1
 8000724:	601a      	str	r2, [r3, #0]
				TurnOnGre();
 8000726:	f000 fd87 	bl	8001238 <TurnOnGre>
				status_manual = MODE4;
 800072a:	4b3f      	ldr	r3, [pc, #252]	; (8000828 <fsm_manual_run+0x284>)
 800072c:	2207      	movs	r2, #7
 800072e:	601a      	str	r2, [r3, #0]
			}
			if(isButton2Pressed() == 1)
 8000730:	f7ff fd1e 	bl	8000170 <isButton2Pressed>
 8000734:	4603      	mov	r3, r0
 8000736:	2b01      	cmp	r3, #1
 8000738:	d121      	bne.n	800077e <fsm_manual_run+0x1da>
			{
				if(first_press == 0)
 800073a:	4b3d      	ldr	r3, [pc, #244]	; (8000830 <fsm_manual_run+0x28c>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d106      	bne.n	8000750 <fsm_manual_run+0x1ac>
				{
					counter_7seg1 = 2;
 8000742:	4b3c      	ldr	r3, [pc, #240]	; (8000834 <fsm_manual_run+0x290>)
 8000744:	2202      	movs	r2, #2
 8000746:	601a      	str	r2, [r3, #0]
					first_press = 1;
 8000748:	4b39      	ldr	r3, [pc, #228]	; (8000830 <fsm_manual_run+0x28c>)
 800074a:	2201      	movs	r2, #1
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	e004      	b.n	800075a <fsm_manual_run+0x1b6>
				}
				else
					counter_7seg1++;
 8000750:	4b38      	ldr	r3, [pc, #224]	; (8000834 <fsm_manual_run+0x290>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	3301      	adds	r3, #1
 8000756:	4a37      	ldr	r2, [pc, #220]	; (8000834 <fsm_manual_run+0x290>)
 8000758:	6013      	str	r3, [r2, #0]

				if(counter_7seg1 >= 100)
 800075a:	4b36      	ldr	r3, [pc, #216]	; (8000834 <fsm_manual_run+0x290>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2b63      	cmp	r3, #99	; 0x63
 8000760:	dd02      	ble.n	8000768 <fsm_manual_run+0x1c4>
				{
					counter_7seg1 = 1;
 8000762:	4b34      	ldr	r3, [pc, #208]	; (8000834 <fsm_manual_run+0x290>)
 8000764:	2201      	movs	r2, #1
 8000766:	601a      	str	r2, [r3, #0]
				}
				counter_7seg2 = 3;
 8000768:	4b33      	ldr	r3, [pc, #204]	; (8000838 <fsm_manual_run+0x294>)
 800076a:	2203      	movs	r2, #3
 800076c:	601a      	str	r2, [r3, #0]
				idle_counter = 0;
 800076e:	4b34      	ldr	r3, [pc, #208]	; (8000840 <fsm_manual_run+0x29c>)
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
				TurnOnYel();
 8000774:	f000 fd53 	bl	800121e <TurnOnYel>
				status_manual = MODE3;
 8000778:	4b2b      	ldr	r3, [pc, #172]	; (8000828 <fsm_manual_run+0x284>)
 800077a:	2206      	movs	r2, #6
 800077c:	601a      	str	r2, [r3, #0]
			}
			if(isButton3Pressed() == 1)
 800077e:	f7ff fd09 	bl	8000194 <isButton3Pressed>
 8000782:	4603      	mov	r3, r0
 8000784:	2b01      	cmp	r3, #1
 8000786:	f040 808e 	bne.w	80008a6 <fsm_manual_run+0x302>
			{
				counter_yel = counter_7seg1;
 800078a:	4b2a      	ldr	r3, [pc, #168]	; (8000834 <fsm_manual_run+0x290>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a31      	ldr	r2, [pc, #196]	; (8000854 <fsm_manual_run+0x2b0>)
 8000790:	6013      	str	r3, [r2, #0]
				status_manual = MODE3;
 8000792:	4b25      	ldr	r3, [pc, #148]	; (8000828 <fsm_manual_run+0x284>)
 8000794:	2206      	movs	r2, #6
 8000796:	601a      	str	r2, [r3, #0]
			}
			break;
 8000798:	e085      	b.n	80008a6 <fsm_manual_run+0x302>
		case MODE4:
			counter_7seg2 = 4;
 800079a:	4b27      	ldr	r3, [pc, #156]	; (8000838 <fsm_manual_run+0x294>)
 800079c:	2204      	movs	r2, #4
 800079e:	601a      	str	r2, [r3, #0]
			if(timerLedGre_flag == 1)
 80007a0:	4b2d      	ldr	r3, [pc, #180]	; (8000858 <fsm_manual_run+0x2b4>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d108      	bne.n	80007ba <fsm_manual_run+0x216>
			{
				blinkGRE();
 80007a8:	f000 ff96 	bl	80016d8 <blinkGRE>
				idle_counter++;
 80007ac:	4b24      	ldr	r3, [pc, #144]	; (8000840 <fsm_manual_run+0x29c>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	3301      	adds	r3, #1
 80007b2:	4a23      	ldr	r2, [pc, #140]	; (8000840 <fsm_manual_run+0x29c>)
 80007b4:	6013      	str	r3, [r2, #0]
				TurnOnGre();
 80007b6:	f000 fd3f 	bl	8001238 <TurnOnGre>
			}
			if(idle_counter >= 20)
 80007ba:	4b21      	ldr	r3, [pc, #132]	; (8000840 <fsm_manual_run+0x29c>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	2b13      	cmp	r3, #19
 80007c0:	dd0b      	ble.n	80007da <fsm_manual_run+0x236>
			{
				//Here, it goes back to MODE 1 after 10s.
				idle_counter = 0;
 80007c2:	4b1f      	ldr	r3, [pc, #124]	; (8000840 <fsm_manual_run+0x29c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
				mode1_flag = 1;
 80007c8:	4b18      	ldr	r3, [pc, #96]	; (800082c <fsm_manual_run+0x288>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	601a      	str	r2, [r3, #0]
				status1 = INIT;
 80007ce:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <fsm_manual_run+0x2a0>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	601a      	str	r2, [r3, #0]
				status2 = INIT;
 80007d4:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <fsm_manual_run+0x2a4>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	601a      	str	r2, [r3, #0]
			}
			if(isButton1Pressed() == 1)
 80007da:	f7ff fcb7 	bl	800014c <isButton1Pressed>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d111      	bne.n	8000808 <fsm_manual_run+0x264>
			{
				//change all to MODE 1(in essence, go back to AUTO status)
				idle_counter = 0;
 80007e4:	4b16      	ldr	r3, [pc, #88]	; (8000840 <fsm_manual_run+0x29c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
				mode1_flag = 1;
 80007ea:	4b10      	ldr	r3, [pc, #64]	; (800082c <fsm_manual_run+0x288>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	601a      	str	r2, [r3, #0]
				first_press = 0;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <fsm_manual_run+0x28c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
				status_manual = 0;
 80007f6:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <fsm_manual_run+0x284>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
				status1 = INIT;
 80007fc:	4b11      	ldr	r3, [pc, #68]	; (8000844 <fsm_manual_run+0x2a0>)
 80007fe:	2201      	movs	r2, #1
 8000800:	601a      	str	r2, [r3, #0]
				status2 = INIT;
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <fsm_manual_run+0x2a4>)
 8000804:	2201      	movs	r2, #1
 8000806:	601a      	str	r2, [r3, #0]
			}
			if(isButton2Pressed() == 1)
 8000808:	f7ff fcb2 	bl	8000170 <isButton2Pressed>
 800080c:	4603      	mov	r3, r0
 800080e:	2b01      	cmp	r3, #1
 8000810:	d138      	bne.n	8000884 <fsm_manual_run+0x2e0>
			{
				if(first_press == 0)
 8000812:	4b07      	ldr	r3, [pc, #28]	; (8000830 <fsm_manual_run+0x28c>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d120      	bne.n	800085c <fsm_manual_run+0x2b8>
				{
					counter_7seg1 = 2;
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <fsm_manual_run+0x290>)
 800081c:	2202      	movs	r2, #2
 800081e:	601a      	str	r2, [r3, #0]
					first_press = 1;
 8000820:	4b03      	ldr	r3, [pc, #12]	; (8000830 <fsm_manual_run+0x28c>)
 8000822:	2201      	movs	r2, #1
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	e01e      	b.n	8000866 <fsm_manual_run+0x2c2>
 8000828:	200000c4 	.word	0x200000c4
 800082c:	200000c8 	.word	0x200000c8
 8000830:	200000d0 	.word	0x200000d0
 8000834:	200000d4 	.word	0x200000d4
 8000838:	200000d8 	.word	0x200000d8
 800083c:	20000100 	.word	0x20000100
 8000840:	200000cc 	.word	0x200000cc
 8000844:	200000bc 	.word	0x200000bc
 8000848:	200000c0 	.word	0x200000c0
 800084c:	2000007c 	.word	0x2000007c
 8000850:	20000104 	.word	0x20000104
 8000854:	20000080 	.word	0x20000080
 8000858:	20000108 	.word	0x20000108
				}
				else
					counter_7seg1++;
 800085c:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <fsm_manual_run+0x30c>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	3301      	adds	r3, #1
 8000862:	4a13      	ldr	r2, [pc, #76]	; (80008b0 <fsm_manual_run+0x30c>)
 8000864:	6013      	str	r3, [r2, #0]

				if(counter_7seg1 >= 100)
 8000866:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <fsm_manual_run+0x30c>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2b63      	cmp	r3, #99	; 0x63
 800086c:	dd02      	ble.n	8000874 <fsm_manual_run+0x2d0>
				{
					counter_7seg1 = 1;
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <fsm_manual_run+0x30c>)
 8000870:	2201      	movs	r2, #1
 8000872:	601a      	str	r2, [r3, #0]
				}
				idle_counter = 0;
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <fsm_manual_run+0x310>)
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
				TurnOnGre();
 800087a:	f000 fcdd 	bl	8001238 <TurnOnGre>
				status_manual = MODE4;
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <fsm_manual_run+0x314>)
 8000880:	2207      	movs	r2, #7
 8000882:	601a      	str	r2, [r3, #0]
			}
			if(isButton3Pressed() == 1)
 8000884:	f7ff fc86 	bl	8000194 <isButton3Pressed>
 8000888:	4603      	mov	r3, r0
 800088a:	2b01      	cmp	r3, #1
 800088c:	d10d      	bne.n	80008aa <fsm_manual_run+0x306>
			{
				counter_gre = counter_7seg1;
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <fsm_manual_run+0x30c>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a0a      	ldr	r2, [pc, #40]	; (80008bc <fsm_manual_run+0x318>)
 8000894:	6013      	str	r3, [r2, #0]
				status_manual = MODE4;
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <fsm_manual_run+0x314>)
 8000898:	2207      	movs	r2, #7
 800089a:	601a      	str	r2, [r3, #0]
			}
			break;
 800089c:	e005      	b.n	80008aa <fsm_manual_run+0x306>
		default:
			break;
 800089e:	bf00      	nop
 80008a0:	e004      	b.n	80008ac <fsm_manual_run+0x308>
			break;
 80008a2:	bf00      	nop
 80008a4:	e002      	b.n	80008ac <fsm_manual_run+0x308>
			break;
 80008a6:	bf00      	nop
 80008a8:	e000      	b.n	80008ac <fsm_manual_run+0x308>
			break;
 80008aa:	bf00      	nop





}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	200000d4 	.word	0x200000d4
 80008b4:	200000cc 	.word	0x200000cc
 80008b8:	200000c4 	.word	0x200000c4
 80008bc:	20000084 	.word	0x20000084

080008c0 <fsm_setting_run>:
 */

#include "fsm_setting.h"

void fsm_setting_run()
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
	set7LED();
 80008c4:	f000 faa0 	bl	8000e08 <set7LED>
	switch(status_manual)
 80008c8:	4b88      	ldr	r3, [pc, #544]	; (8000aec <fsm_setting_run+0x22c>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b0c      	cmp	r3, #12
 80008ce:	f000 80b4 	beq.w	8000a3a <fsm_setting_run+0x17a>
 80008d2:	2b0c      	cmp	r3, #12
 80008d4:	f300 8108 	bgt.w	8000ae8 <fsm_setting_run+0x228>
 80008d8:	2b08      	cmp	r3, #8
 80008da:	d002      	beq.n	80008e2 <fsm_setting_run+0x22>
 80008dc:	2b09      	cmp	r3, #9
 80008de:	d056      	beq.n	800098e <fsm_setting_run+0xce>
				counter_gre = counter_7seg1;
			}

	}

}
 80008e0:	e102      	b.n	8000ae8 <fsm_setting_run+0x228>
			btn = SETTING2;
 80008e2:	4b83      	ldr	r3, [pc, #524]	; (8000af0 <fsm_setting_run+0x230>)
 80008e4:	2208      	movs	r2, #8
 80008e6:	601a      	str	r2, [r3, #0]
			if(isButton2Pressed() == 1)
 80008e8:	f7ff fc42 	bl	8000170 <isButton2Pressed>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d11d      	bne.n	800092e <fsm_setting_run+0x6e>
				btn = SETTING2;
 80008f2:	4b7f      	ldr	r3, [pc, #508]	; (8000af0 <fsm_setting_run+0x230>)
 80008f4:	2208      	movs	r2, #8
 80008f6:	601a      	str	r2, [r3, #0]
				idle_counter = 0;
 80008f8:	4b7e      	ldr	r3, [pc, #504]	; (8000af4 <fsm_setting_run+0x234>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
				counter_7seg2 = 2;
 80008fe:	4b7e      	ldr	r3, [pc, #504]	; (8000af8 <fsm_setting_run+0x238>)
 8000900:	2202      	movs	r2, #2
 8000902:	601a      	str	r2, [r3, #0]
				status_manual = SETTING2;
 8000904:	4b79      	ldr	r3, [pc, #484]	; (8000aec <fsm_setting_run+0x22c>)
 8000906:	2208      	movs	r2, #8
 8000908:	601a      	str	r2, [r3, #0]
				TurnOnRed();
 800090a:	f000 fc7b 	bl	8001204 <TurnOnRed>
				isButton1Pressed();
 800090e:	f7ff fc1d 	bl	800014c <isButton1Pressed>
				isButton3Pressed();
 8000912:	f7ff fc3f 	bl	8000194 <isButton3Pressed>
				counter_7seg1++;
 8000916:	4b79      	ldr	r3, [pc, #484]	; (8000afc <fsm_setting_run+0x23c>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	3301      	adds	r3, #1
 800091c:	4a77      	ldr	r2, [pc, #476]	; (8000afc <fsm_setting_run+0x23c>)
 800091e:	6013      	str	r3, [r2, #0]
				if(counter_7seg1 >= 99)
 8000920:	4b76      	ldr	r3, [pc, #472]	; (8000afc <fsm_setting_run+0x23c>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b62      	cmp	r3, #98	; 0x62
 8000926:	dd02      	ble.n	800092e <fsm_setting_run+0x6e>
					counter_7seg1 = 1;
 8000928:	4b74      	ldr	r3, [pc, #464]	; (8000afc <fsm_setting_run+0x23c>)
 800092a:	2201      	movs	r2, #1
 800092c:	601a      	str	r2, [r3, #0]
			if(timerLedRed_flag == 1)
 800092e:	4b74      	ldr	r3, [pc, #464]	; (8000b00 <fsm_setting_run+0x240>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	2b01      	cmp	r3, #1
 8000934:	d108      	bne.n	8000948 <fsm_setting_run+0x88>
				blinkRED();
 8000936:	f000 fe8b 	bl	8001650 <blinkRED>
				idle_counter++;
 800093a:	4b6e      	ldr	r3, [pc, #440]	; (8000af4 <fsm_setting_run+0x234>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	3301      	adds	r3, #1
 8000940:	4a6c      	ldr	r2, [pc, #432]	; (8000af4 <fsm_setting_run+0x234>)
 8000942:	6013      	str	r3, [r2, #0]
				TurnOnRed();
 8000944:	f000 fc5e 	bl	8001204 <TurnOnRed>
			if(idle_counter >= 20)
 8000948:	4b6a      	ldr	r3, [pc, #424]	; (8000af4 <fsm_setting_run+0x234>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b13      	cmp	r3, #19
 800094e:	dd08      	ble.n	8000962 <fsm_setting_run+0xa2>
				status1 = INIT;
 8000950:	4b6c      	ldr	r3, [pc, #432]	; (8000b04 <fsm_setting_run+0x244>)
 8000952:	2201      	movs	r2, #1
 8000954:	601a      	str	r2, [r3, #0]
				status2 = INIT;
 8000956:	4b6c      	ldr	r3, [pc, #432]	; (8000b08 <fsm_setting_run+0x248>)
 8000958:	2201      	movs	r2, #1
 800095a:	601a      	str	r2, [r3, #0]
				idle_counter = 0;
 800095c:	4b65      	ldr	r3, [pc, #404]	; (8000af4 <fsm_setting_run+0x234>)
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
			if(isButton1Pressed() == 1)
 8000962:	f7ff fbf3 	bl	800014c <isButton1Pressed>
 8000966:	4603      	mov	r3, r0
 8000968:	2b01      	cmp	r3, #1
 800096a:	d107      	bne.n	800097c <fsm_setting_run+0xbc>
				status_manual = MODE3;
 800096c:	4b5f      	ldr	r3, [pc, #380]	; (8000aec <fsm_setting_run+0x22c>)
 800096e:	2206      	movs	r2, #6
 8000970:	601a      	str	r2, [r3, #0]
				idle_counter = 0;
 8000972:	4b60      	ldr	r3, [pc, #384]	; (8000af4 <fsm_setting_run+0x234>)
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
				TurnOnYel();
 8000978:	f000 fc51 	bl	800121e <TurnOnYel>
			if(isButton3Pressed() == 1)
 800097c:	f7ff fc0a 	bl	8000194 <isButton3Pressed>
 8000980:	4603      	mov	r3, r0
 8000982:	2b01      	cmp	r3, #1
 8000984:	d103      	bne.n	800098e <fsm_setting_run+0xce>
				counter_red = counter_7seg1;
 8000986:	4b5d      	ldr	r3, [pc, #372]	; (8000afc <fsm_setting_run+0x23c>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a60      	ldr	r2, [pc, #384]	; (8000b0c <fsm_setting_run+0x24c>)
 800098c:	6013      	str	r3, [r2, #0]
			btn = SETTING3;
 800098e:	4b58      	ldr	r3, [pc, #352]	; (8000af0 <fsm_setting_run+0x230>)
 8000990:	2209      	movs	r2, #9
 8000992:	601a      	str	r2, [r3, #0]
			if(isButton2Pressed() == 1)
 8000994:	f7ff fbec 	bl	8000170 <isButton2Pressed>
 8000998:	4603      	mov	r3, r0
 800099a:	2b01      	cmp	r3, #1
 800099c:	d11d      	bne.n	80009da <fsm_setting_run+0x11a>
				btn = SETTING3;
 800099e:	4b54      	ldr	r3, [pc, #336]	; (8000af0 <fsm_setting_run+0x230>)
 80009a0:	2209      	movs	r2, #9
 80009a2:	601a      	str	r2, [r3, #0]
				idle_counter = 0;
 80009a4:	4b53      	ldr	r3, [pc, #332]	; (8000af4 <fsm_setting_run+0x234>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
				counter_7seg2 = 3;
 80009aa:	4b53      	ldr	r3, [pc, #332]	; (8000af8 <fsm_setting_run+0x238>)
 80009ac:	2203      	movs	r2, #3
 80009ae:	601a      	str	r2, [r3, #0]
				status_manual = SETTING3;
 80009b0:	4b4e      	ldr	r3, [pc, #312]	; (8000aec <fsm_setting_run+0x22c>)
 80009b2:	2209      	movs	r2, #9
 80009b4:	601a      	str	r2, [r3, #0]
				isButton1Pressed();
 80009b6:	f7ff fbc9 	bl	800014c <isButton1Pressed>
				isButton3Pressed();
 80009ba:	f7ff fbeb 	bl	8000194 <isButton3Pressed>
				TurnOnYel();
 80009be:	f000 fc2e 	bl	800121e <TurnOnYel>
				counter_7seg1++;
 80009c2:	4b4e      	ldr	r3, [pc, #312]	; (8000afc <fsm_setting_run+0x23c>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	3301      	adds	r3, #1
 80009c8:	4a4c      	ldr	r2, [pc, #304]	; (8000afc <fsm_setting_run+0x23c>)
 80009ca:	6013      	str	r3, [r2, #0]
				if(counter_7seg1 >= 99)
 80009cc:	4b4b      	ldr	r3, [pc, #300]	; (8000afc <fsm_setting_run+0x23c>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2b62      	cmp	r3, #98	; 0x62
 80009d2:	dd02      	ble.n	80009da <fsm_setting_run+0x11a>
					counter_7seg1 = 1;
 80009d4:	4b49      	ldr	r3, [pc, #292]	; (8000afc <fsm_setting_run+0x23c>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	601a      	str	r2, [r3, #0]
			if(timerLedYel_flag == 1)
 80009da:	4b4d      	ldr	r3, [pc, #308]	; (8000b10 <fsm_setting_run+0x250>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d108      	bne.n	80009f4 <fsm_setting_run+0x134>
				blinkYEL();
 80009e2:	f000 fe57 	bl	8001694 <blinkYEL>
				idle_counter++;
 80009e6:	4b43      	ldr	r3, [pc, #268]	; (8000af4 <fsm_setting_run+0x234>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	3301      	adds	r3, #1
 80009ec:	4a41      	ldr	r2, [pc, #260]	; (8000af4 <fsm_setting_run+0x234>)
 80009ee:	6013      	str	r3, [r2, #0]
				TurnOnYel();
 80009f0:	f000 fc15 	bl	800121e <TurnOnYel>
			if(idle_counter >= 20)
 80009f4:	4b3f      	ldr	r3, [pc, #252]	; (8000af4 <fsm_setting_run+0x234>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2b13      	cmp	r3, #19
 80009fa:	dd08      	ble.n	8000a0e <fsm_setting_run+0x14e>
				status1 = INIT;
 80009fc:	4b41      	ldr	r3, [pc, #260]	; (8000b04 <fsm_setting_run+0x244>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	601a      	str	r2, [r3, #0]
				status2 = INIT;
 8000a02:	4b41      	ldr	r3, [pc, #260]	; (8000b08 <fsm_setting_run+0x248>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	601a      	str	r2, [r3, #0]
				idle_counter = 0;
 8000a08:	4b3a      	ldr	r3, [pc, #232]	; (8000af4 <fsm_setting_run+0x234>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
			if(isButton1Pressed() == 1)
 8000a0e:	f7ff fb9d 	bl	800014c <isButton1Pressed>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d107      	bne.n	8000a28 <fsm_setting_run+0x168>
				status_manual = MODE4;
 8000a18:	4b34      	ldr	r3, [pc, #208]	; (8000aec <fsm_setting_run+0x22c>)
 8000a1a:	2207      	movs	r2, #7
 8000a1c:	601a      	str	r2, [r3, #0]
				idle_counter = 0;
 8000a1e:	4b35      	ldr	r3, [pc, #212]	; (8000af4 <fsm_setting_run+0x234>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
				TurnOnGre();
 8000a24:	f000 fc08 	bl	8001238 <TurnOnGre>
			if(isButton3Pressed() == 1)
 8000a28:	f7ff fbb4 	bl	8000194 <isButton3Pressed>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d103      	bne.n	8000a3a <fsm_setting_run+0x17a>
				counter_yel = counter_7seg1;
 8000a32:	4b32      	ldr	r3, [pc, #200]	; (8000afc <fsm_setting_run+0x23c>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a37      	ldr	r2, [pc, #220]	; (8000b14 <fsm_setting_run+0x254>)
 8000a38:	6013      	str	r3, [r2, #0]
			btn = SETTING4;
 8000a3a:	4b2d      	ldr	r3, [pc, #180]	; (8000af0 <fsm_setting_run+0x230>)
 8000a3c:	220c      	movs	r2, #12
 8000a3e:	601a      	str	r2, [r3, #0]
			if(isButton2Pressed() == 1)
 8000a40:	f7ff fb96 	bl	8000170 <isButton2Pressed>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d11a      	bne.n	8000a80 <fsm_setting_run+0x1c0>
				idle_counter = 0;
 8000a4a:	4b2a      	ldr	r3, [pc, #168]	; (8000af4 <fsm_setting_run+0x234>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
				counter_7seg2 = 4;
 8000a50:	4b29      	ldr	r3, [pc, #164]	; (8000af8 <fsm_setting_run+0x238>)
 8000a52:	2204      	movs	r2, #4
 8000a54:	601a      	str	r2, [r3, #0]
				status_manual = SETTING4;
 8000a56:	4b25      	ldr	r3, [pc, #148]	; (8000aec <fsm_setting_run+0x22c>)
 8000a58:	220c      	movs	r2, #12
 8000a5a:	601a      	str	r2, [r3, #0]
				isButton1Pressed();
 8000a5c:	f7ff fb76 	bl	800014c <isButton1Pressed>
				isButton3Pressed();
 8000a60:	f7ff fb98 	bl	8000194 <isButton3Pressed>
				TurnOnGre();
 8000a64:	f000 fbe8 	bl	8001238 <TurnOnGre>
				counter_7seg1++;
 8000a68:	4b24      	ldr	r3, [pc, #144]	; (8000afc <fsm_setting_run+0x23c>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	4a23      	ldr	r2, [pc, #140]	; (8000afc <fsm_setting_run+0x23c>)
 8000a70:	6013      	str	r3, [r2, #0]
				if(counter_7seg1 >= 99)
 8000a72:	4b22      	ldr	r3, [pc, #136]	; (8000afc <fsm_setting_run+0x23c>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2b62      	cmp	r3, #98	; 0x62
 8000a78:	dd02      	ble.n	8000a80 <fsm_setting_run+0x1c0>
					counter_7seg1 = 1;
 8000a7a:	4b20      	ldr	r3, [pc, #128]	; (8000afc <fsm_setting_run+0x23c>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	601a      	str	r2, [r3, #0]
			if(timerLedGre_flag == 1)
 8000a80:	4b25      	ldr	r3, [pc, #148]	; (8000b18 <fsm_setting_run+0x258>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d108      	bne.n	8000a9a <fsm_setting_run+0x1da>
				blinkGRE();
 8000a88:	f000 fe26 	bl	80016d8 <blinkGRE>
				idle_counter++;
 8000a8c:	4b19      	ldr	r3, [pc, #100]	; (8000af4 <fsm_setting_run+0x234>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	3301      	adds	r3, #1
 8000a92:	4a18      	ldr	r2, [pc, #96]	; (8000af4 <fsm_setting_run+0x234>)
 8000a94:	6013      	str	r3, [r2, #0]
				TurnOnGre();
 8000a96:	f000 fbcf 	bl	8001238 <TurnOnGre>
			if(idle_counter >= 20)
 8000a9a:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <fsm_setting_run+0x234>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2b13      	cmp	r3, #19
 8000aa0:	dd08      	ble.n	8000ab4 <fsm_setting_run+0x1f4>
				status1 = INIT;
 8000aa2:	4b18      	ldr	r3, [pc, #96]	; (8000b04 <fsm_setting_run+0x244>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	601a      	str	r2, [r3, #0]
				status2 = INIT;
 8000aa8:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <fsm_setting_run+0x248>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	601a      	str	r2, [r3, #0]
				idle_counter = 0;
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <fsm_setting_run+0x234>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
			if(isButton1Pressed() == 1)
 8000ab4:	f7ff fb4a 	bl	800014c <isButton1Pressed>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d10b      	bne.n	8000ad6 <fsm_setting_run+0x216>
				status1 = INIT;
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <fsm_setting_run+0x244>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	601a      	str	r2, [r3, #0]
				status2 = INIT;
 8000ac4:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <fsm_setting_run+0x248>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	601a      	str	r2, [r3, #0]
				idle_counter = 0;
 8000aca:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <fsm_setting_run+0x234>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
				mode1_flag = 1;
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <fsm_setting_run+0x25c>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	601a      	str	r2, [r3, #0]
			if(isButton3Pressed() == 1)
 8000ad6:	f7ff fb5d 	bl	8000194 <isButton3Pressed>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d103      	bne.n	8000ae8 <fsm_setting_run+0x228>
				counter_gre = counter_7seg1;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <fsm_setting_run+0x23c>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a0e      	ldr	r2, [pc, #56]	; (8000b20 <fsm_setting_run+0x260>)
 8000ae6:	6013      	str	r3, [r2, #0]
}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	200000c4 	.word	0x200000c4
 8000af0:	200000dc 	.word	0x200000dc
 8000af4:	200000cc 	.word	0x200000cc
 8000af8:	200000d8 	.word	0x200000d8
 8000afc:	200000d4 	.word	0x200000d4
 8000b00:	20000100 	.word	0x20000100
 8000b04:	200000bc 	.word	0x200000bc
 8000b08:	200000c0 	.word	0x200000c0
 8000b0c:	2000007c 	.word	0x2000007c
 8000b10:	20000104 	.word	0x20000104
 8000b14:	20000080 	.word	0x20000080
 8000b18:	20000108 	.word	0x20000108
 8000b1c:	200000c8 	.word	0x200000c8
 8000b20:	20000084 	.word	0x20000084

08000b24 <display7SEG1>:
int index_led2 = 0;
int segmentNumber1[10] = {0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90};
int segmentNumber2[10] = {0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90};
int led_buffer[4] = {1 , 2 , 3 , 4};

void display7SEG1(int num){
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
    int number = segmentNumber1[num];
 8000b2c:	4a2a      	ldr	r2, [pc, #168]	; (8000bd8 <display7SEG1+0xb4>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b34:	60fb      	str	r3, [r7, #12]
	//Check a nth bit by shifting n times to the right, then bitwise AND it:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, ((number>>0)&0x01));
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	461a      	mov	r2, r3
 8000b42:	2101      	movs	r1, #1
 8000b44:	4825      	ldr	r0, [pc, #148]	; (8000bdc <display7SEG1+0xb8>)
 8000b46:	f001 f910 	bl	8001d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, ((number>>1)&0x01));
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	105b      	asrs	r3, r3, #1
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	f003 0301 	and.w	r3, r3, #1
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	461a      	mov	r2, r3
 8000b58:	2102      	movs	r1, #2
 8000b5a:	4820      	ldr	r0, [pc, #128]	; (8000bdc <display7SEG1+0xb8>)
 8000b5c:	f001 f905 	bl	8001d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, ((number>>2)&0x01));
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	109b      	asrs	r3, r3, #2
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	2104      	movs	r1, #4
 8000b70:	481a      	ldr	r0, [pc, #104]	; (8000bdc <display7SEG1+0xb8>)
 8000b72:	f001 f8fa 	bl	8001d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, ((number>>3)&0x01));
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	10db      	asrs	r3, r3, #3
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	461a      	mov	r2, r3
 8000b84:	2108      	movs	r1, #8
 8000b86:	4815      	ldr	r0, [pc, #84]	; (8000bdc <display7SEG1+0xb8>)
 8000b88:	f001 f8ef 	bl	8001d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, ((number>>4)&0x01));
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	111b      	asrs	r3, r3, #4
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	461a      	mov	r2, r3
 8000b9a:	2110      	movs	r1, #16
 8000b9c:	480f      	ldr	r0, [pc, #60]	; (8000bdc <display7SEG1+0xb8>)
 8000b9e:	f001 f8e4 	bl	8001d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, ((number>>5)&0x01));
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	115b      	asrs	r3, r3, #5
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	f003 0301 	and.w	r3, r3, #1
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	461a      	mov	r2, r3
 8000bb0:	2120      	movs	r1, #32
 8000bb2:	480a      	ldr	r0, [pc, #40]	; (8000bdc <display7SEG1+0xb8>)
 8000bb4:	f001 f8d9 	bl	8001d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, ((number>>6)&0x01));
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	119b      	asrs	r3, r3, #6
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	2140      	movs	r1, #64	; 0x40
 8000bc8:	4804      	ldr	r0, [pc, #16]	; (8000bdc <display7SEG1+0xb8>)
 8000bca:	f001 f8ce 	bl	8001d6a <HAL_GPIO_WritePin>
}
 8000bce:	bf00      	nop
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	2000001c 	.word	0x2000001c
 8000bdc:	40010c00 	.word	0x40010c00

08000be0 <display7SEG2>:

void display7SEG2(int num){
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
    int number = segmentNumber2[num];
 8000be8:	4a2d      	ldr	r2, [pc, #180]	; (8000ca0 <display7SEG2+0xc0>)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf0:	60fb      	str	r3, [r7, #12]
	//Check a nth bit by shifting n times to the right, then bitwise AND it:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, ((number>>0)&0x01));
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c02:	4828      	ldr	r0, [pc, #160]	; (8000ca4 <display7SEG2+0xc4>)
 8000c04:	f001 f8b1 	bl	8001d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, ((number>>1)&0x01));
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	105b      	asrs	r3, r3, #1
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	461a      	mov	r2, r3
 8000c16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c1a:	4822      	ldr	r0, [pc, #136]	; (8000ca4 <display7SEG2+0xc4>)
 8000c1c:	f001 f8a5 	bl	8001d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, ((number>>2)&0x01));
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	109b      	asrs	r3, r3, #2
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c32:	481c      	ldr	r0, [pc, #112]	; (8000ca4 <display7SEG2+0xc4>)
 8000c34:	f001 f899 	bl	8001d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, ((number>>3)&0x01));
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	10db      	asrs	r3, r3, #3
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	461a      	mov	r2, r3
 8000c46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c4a:	4816      	ldr	r0, [pc, #88]	; (8000ca4 <display7SEG2+0xc4>)
 8000c4c:	f001 f88d 	bl	8001d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, ((number>>4)&0x01));
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	111b      	asrs	r3, r3, #4
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c62:	4810      	ldr	r0, [pc, #64]	; (8000ca4 <display7SEG2+0xc4>)
 8000c64:	f001 f881 	bl	8001d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, ((number>>5)&0x01));
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	115b      	asrs	r3, r3, #5
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	461a      	mov	r2, r3
 8000c76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c7a:	480a      	ldr	r0, [pc, #40]	; (8000ca4 <display7SEG2+0xc4>)
 8000c7c:	f001 f875 	bl	8001d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, ((number>>6)&0x01));
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	119b      	asrs	r3, r3, #6
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c92:	4804      	ldr	r0, [pc, #16]	; (8000ca4 <display7SEG2+0xc4>)
 8000c94:	f001 f869 	bl	8001d6a <HAL_GPIO_WritePin>
}
 8000c98:	bf00      	nop
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000044 	.word	0x20000044
 8000ca4:	40010c00 	.word	0x40010c00

08000ca8 <updateClockBuffer>:

void updateClockBuffer(){
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
    //update values for the array led_buffer according to the values of hour and minute.
    led_buffer[0] = counter_7seg1/10;
 8000cac:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <updateClockBuffer+0x70>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a1a      	ldr	r2, [pc, #104]	; (8000d1c <updateClockBuffer+0x74>)
 8000cb2:	fb82 1203 	smull	r1, r2, r2, r3
 8000cb6:	1092      	asrs	r2, r2, #2
 8000cb8:	17db      	asrs	r3, r3, #31
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	4a18      	ldr	r2, [pc, #96]	; (8000d20 <updateClockBuffer+0x78>)
 8000cbe:	6013      	str	r3, [r2, #0]
    led_buffer[1] = counter_7seg1%10;
 8000cc0:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <updateClockBuffer+0x70>)
 8000cc2:	6819      	ldr	r1, [r3, #0]
 8000cc4:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <updateClockBuffer+0x74>)
 8000cc6:	fb83 2301 	smull	r2, r3, r3, r1
 8000cca:	109a      	asrs	r2, r3, #2
 8000ccc:	17cb      	asrs	r3, r1, #31
 8000cce:	1ad2      	subs	r2, r2, r3
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	4413      	add	r3, r2
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	1aca      	subs	r2, r1, r3
 8000cda:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <updateClockBuffer+0x78>)
 8000cdc:	605a      	str	r2, [r3, #4]
    led_buffer[2] = counter_7seg2/10;
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <updateClockBuffer+0x7c>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a0e      	ldr	r2, [pc, #56]	; (8000d1c <updateClockBuffer+0x74>)
 8000ce4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ce8:	1092      	asrs	r2, r2, #2
 8000cea:	17db      	asrs	r3, r3, #31
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	4a0c      	ldr	r2, [pc, #48]	; (8000d20 <updateClockBuffer+0x78>)
 8000cf0:	6093      	str	r3, [r2, #8]
    led_buffer[3] = counter_7seg2%10;
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <updateClockBuffer+0x7c>)
 8000cf4:	6819      	ldr	r1, [r3, #0]
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <updateClockBuffer+0x74>)
 8000cf8:	fb83 2301 	smull	r2, r3, r3, r1
 8000cfc:	109a      	asrs	r2, r3, #2
 8000cfe:	17cb      	asrs	r3, r1, #31
 8000d00:	1ad2      	subs	r2, r2, r3
 8000d02:	4613      	mov	r3, r2
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	4413      	add	r3, r2
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	1aca      	subs	r2, r1, r3
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <updateClockBuffer+0x78>)
 8000d0e:	60da      	str	r2, [r3, #12]
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr
 8000d18:	200000d4 	.word	0x200000d4
 8000d1c:	66666667 	.word	0x66666667
 8000d20:	2000006c 	.word	0x2000006c
 8000d24:	200000d8 	.word	0x200000d8

08000d28 <update7SEG1>:


void update7SEG1 ( int index ){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	switch ( index ) {
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d003      	beq.n	8000d3e <update7SEG1+0x16>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d012      	beq.n	8000d62 <update7SEG1+0x3a>
		  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
		  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
		  display7SEG1(led_buffer[1]);
		  break;
	}
}
 8000d3c:	e023      	b.n	8000d86 <update7SEG1+0x5e>
		  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d44:	4812      	ldr	r0, [pc, #72]	; (8000d90 <update7SEG1+0x68>)
 8000d46:	f001 f810 	bl	8001d6a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d50:	480f      	ldr	r0, [pc, #60]	; (8000d90 <update7SEG1+0x68>)
 8000d52:	f001 f80a 	bl	8001d6a <HAL_GPIO_WritePin>
		  display7SEG1(led_buffer[0]);
 8000d56:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <update7SEG1+0x6c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff fee2 	bl	8000b24 <display7SEG1>
		  break;
 8000d60:	e011      	b.n	8000d86 <update7SEG1+0x5e>
		  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8000d62:	2201      	movs	r2, #1
 8000d64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d68:	4809      	ldr	r0, [pc, #36]	; (8000d90 <update7SEG1+0x68>)
 8000d6a:	f000 fffe 	bl	8001d6a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d74:	4806      	ldr	r0, [pc, #24]	; (8000d90 <update7SEG1+0x68>)
 8000d76:	f000 fff8 	bl	8001d6a <HAL_GPIO_WritePin>
		  display7SEG1(led_buffer[1]);
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <update7SEG1+0x6c>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fed0 	bl	8000b24 <display7SEG1>
		  break;
 8000d84:	bf00      	nop
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40010800 	.word	0x40010800
 8000d94:	2000006c 	.word	0x2000006c

08000d98 <update7SEG2>:

void update7SEG2 ( int index ){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	switch ( index ) {
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d003      	beq.n	8000dae <update7SEG2+0x16>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d012      	beq.n	8000dd2 <update7SEG2+0x3a>
		  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
		  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
		  display7SEG2(led_buffer[3]);
		  break;
	}
}
 8000dac:	e023      	b.n	8000df6 <update7SEG2+0x5e>
		  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000db4:	4812      	ldr	r0, [pc, #72]	; (8000e00 <update7SEG2+0x68>)
 8000db6:	f000 ffd8 	bl	8001d6a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000dba:	2201      	movs	r2, #1
 8000dbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dc0:	480f      	ldr	r0, [pc, #60]	; (8000e00 <update7SEG2+0x68>)
 8000dc2:	f000 ffd2 	bl	8001d6a <HAL_GPIO_WritePin>
		  display7SEG2(led_buffer[2]);
 8000dc6:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <update7SEG2+0x6c>)
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff ff08 	bl	8000be0 <display7SEG2>
		  break;
 8000dd0:	e011      	b.n	8000df6 <update7SEG2+0x5e>
		  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dd8:	4809      	ldr	r0, [pc, #36]	; (8000e00 <update7SEG2+0x68>)
 8000dda:	f000 ffc6 	bl	8001d6a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 8000dde:	2200      	movs	r2, #0
 8000de0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000de4:	4806      	ldr	r0, [pc, #24]	; (8000e00 <update7SEG2+0x68>)
 8000de6:	f000 ffc0 	bl	8001d6a <HAL_GPIO_WritePin>
		  display7SEG2(led_buffer[3]);
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <update7SEG2+0x6c>)
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff fef6 	bl	8000be0 <display7SEG2>
		  break;
 8000df4:	bf00      	nop
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40010800 	.word	0x40010800
 8000e04:	2000006c 	.word	0x2000006c

08000e08 <set7LED>:

void set7LED()
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
	if(segment1_flag == 1)
 8000e0c:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <set7LED+0x68>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d113      	bne.n	8000e3c <set7LED+0x34>
	{
		updateClockBuffer();
 8000e14:	f7ff ff48 	bl	8000ca8 <updateClockBuffer>
		if(index_led1 >= 2)
 8000e18:	4b16      	ldr	r3, [pc, #88]	; (8000e74 <set7LED+0x6c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	dd02      	ble.n	8000e26 <set7LED+0x1e>
			index_led1 = 0;
 8000e20:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <set7LED+0x6c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
		update7SEG1(index_led1++);
 8000e26:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <set7LED+0x6c>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	1c5a      	adds	r2, r3, #1
 8000e2c:	4911      	ldr	r1, [pc, #68]	; (8000e74 <set7LED+0x6c>)
 8000e2e:	600a      	str	r2, [r1, #0]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ff79 	bl	8000d28 <update7SEG1>
		setTimer7segment1(20);
 8000e36:	2014      	movs	r0, #20
 8000e38:	f000 f980 	bl	800113c <setTimer7segment1>
	}

	if(segment2_flag == 1)
 8000e3c:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <set7LED+0x70>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d113      	bne.n	8000e6c <set7LED+0x64>
	{
		updateClockBuffer();
 8000e44:	f7ff ff30 	bl	8000ca8 <updateClockBuffer>
		if(index_led2 >= 2)
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <set7LED+0x74>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	dd02      	ble.n	8000e56 <set7LED+0x4e>
			index_led2 = 0;
 8000e50:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <set7LED+0x74>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
		update7SEG2(index_led2++);
 8000e56:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <set7LED+0x74>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	1c5a      	adds	r2, r3, #1
 8000e5c:	4907      	ldr	r1, [pc, #28]	; (8000e7c <set7LED+0x74>)
 8000e5e:	600a      	str	r2, [r1, #0]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff99 	bl	8000d98 <update7SEG2>
		setTimer7segment2(20);
 8000e66:	2014      	movs	r0, #20
 8000e68:	f000 f97c 	bl	8001164 <setTimer7segment2>
	}
}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000118 	.word	0x20000118
 8000e74:	200000e0 	.word	0x200000e0
 8000e78:	2000011c 	.word	0x2000011c
 8000e7c:	200000e4 	.word	0x200000e4

08000e80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e84:	f000 fc70 	bl	8001768 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e88:	f000 f820 	bl	8000ecc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e8c:	f000 f8a6 	bl	8000fdc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e90:	f000 f858 	bl	8000f44 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 8000e94:	480a      	ldr	r0, [pc, #40]	; (8000ec0 <main+0x40>)
 8000e96:	f001 fbc5 	bl	8002624 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  setTimer1(100); //timer for updating time
//  setTimer2(100); //timer for 7 SEGMENTS
//  setTimer3(100); //timer for LEDs
  setTimer7segment1(25);
 8000e9a:	2019      	movs	r0, #25
 8000e9c:	f000 f94e 	bl	800113c <setTimer7segment1>
  setTimer7segment2(25);
 8000ea0:	2019      	movs	r0, #25
 8000ea2:	f000 f95f 	bl	8001164 <setTimer7segment2>
  status1 = INIT;
 8000ea6:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <main+0x44>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	601a      	str	r2, [r3, #0]
  status2 = INIT;
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <main+0x48>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	601a      	str	r2, [r3, #0]

  while (1)
  {
    /* USER CODE END WHILE */

	  fsm_automatic_run();
 8000eb2:	f7ff fa81 	bl	80003b8 <fsm_automatic_run>
	  fsm_manual_run();
 8000eb6:	f7ff fb75 	bl	80005a4 <fsm_manual_run>
	  fsm_setting_run();
 8000eba:	f7ff fd01 	bl	80008c0 <fsm_setting_run>
	  fsm_automatic_run();
 8000ebe:	e7f8      	b.n	8000eb2 <main+0x32>
 8000ec0:	20000150 	.word	0x20000150
 8000ec4:	200000bc 	.word	0x200000bc
 8000ec8:	200000c0 	.word	0x200000c0

08000ecc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b090      	sub	sp, #64	; 0x40
 8000ed0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed2:	f107 0318 	add.w	r3, r7, #24
 8000ed6:	2228      	movs	r2, #40	; 0x28
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f001 ff52 	bl	8002d84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee0:	1d3b      	adds	r3, r7, #4
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]
 8000eec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ef6:	2310      	movs	r3, #16
 8000ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000efa:	2300      	movs	r3, #0
 8000efc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000efe:	f107 0318 	add.w	r3, r7, #24
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 ff62 	bl	8001dcc <HAL_RCC_OscConfig>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000f0e:	f000 f8e3 	bl	80010d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f12:	230f      	movs	r3, #15
 8000f14:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f16:	2300      	movs	r3, #0
 8000f18:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f001 f9ce 	bl	80022cc <HAL_RCC_ClockConfig>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f36:	f000 f8cf 	bl	80010d8 <Error_Handler>
  }
}
 8000f3a:	bf00      	nop
 8000f3c:	3740      	adds	r7, #64	; 0x40
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f4a:	f107 0308 	add.w	r3, r7, #8
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f58:	463b      	mov	r3, r7
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f60:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <MX_TIM2_Init+0x94>)
 8000f62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000f68:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <MX_TIM2_Init+0x94>)
 8000f6a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f70:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <MX_TIM2_Init+0x94>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000f76:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <MX_TIM2_Init+0x94>)
 8000f78:	2209      	movs	r2, #9
 8000f7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f7c:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <MX_TIM2_Init+0x94>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f82:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <MX_TIM2_Init+0x94>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f88:	4813      	ldr	r0, [pc, #76]	; (8000fd8 <MX_TIM2_Init+0x94>)
 8000f8a:	f001 fafb 	bl	8002584 <HAL_TIM_Base_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f94:	f000 f8a0 	bl	80010d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f9e:	f107 0308 	add.w	r3, r7, #8
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	480c      	ldr	r0, [pc, #48]	; (8000fd8 <MX_TIM2_Init+0x94>)
 8000fa6:	f001 fc79 	bl	800289c <HAL_TIM_ConfigClockSource>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fb0:	f000 f892 	bl	80010d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fbc:	463b      	mov	r3, r7
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <MX_TIM2_Init+0x94>)
 8000fc2:	f001 fe51 	bl	8002c68 <HAL_TIMEx_MasterConfigSynchronization>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000fcc:	f000 f884 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fd0:	bf00      	nop
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000150 	.word	0x20000150

08000fdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b088      	sub	sp, #32
 8000fe0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe2:	f107 0310 	add.w	r3, r7, #16
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff0:	4b2f      	ldr	r3, [pc, #188]	; (80010b0 <MX_GPIO_Init+0xd4>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	4a2e      	ldr	r2, [pc, #184]	; (80010b0 <MX_GPIO_Init+0xd4>)
 8000ff6:	f043 0310 	orr.w	r3, r3, #16
 8000ffa:	6193      	str	r3, [r2, #24]
 8000ffc:	4b2c      	ldr	r3, [pc, #176]	; (80010b0 <MX_GPIO_Init+0xd4>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	f003 0310 	and.w	r3, r3, #16
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001008:	4b29      	ldr	r3, [pc, #164]	; (80010b0 <MX_GPIO_Init+0xd4>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	4a28      	ldr	r2, [pc, #160]	; (80010b0 <MX_GPIO_Init+0xd4>)
 800100e:	f043 0304 	orr.w	r3, r3, #4
 8001012:	6193      	str	r3, [r2, #24]
 8001014:	4b26      	ldr	r3, [pc, #152]	; (80010b0 <MX_GPIO_Init+0xd4>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	f003 0304 	and.w	r3, r3, #4
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001020:	4b23      	ldr	r3, [pc, #140]	; (80010b0 <MX_GPIO_Init+0xd4>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	4a22      	ldr	r2, [pc, #136]	; (80010b0 <MX_GPIO_Init+0xd4>)
 8001026:	f043 0308 	orr.w	r3, r3, #8
 800102a:	6193      	str	r3, [r2, #24]
 800102c:	4b20      	ldr	r3, [pc, #128]	; (80010b0 <MX_GPIO_Init+0xd4>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	f003 0308 	and.w	r3, r3, #8
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_YEL1_Pin|LED_GRE1_Pin|LED_RED2_Pin
 8001038:	2200      	movs	r2, #0
 800103a:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 800103e:	481d      	ldr	r0, [pc, #116]	; (80010b4 <MX_GPIO_Init+0xd8>)
 8001040:	f000 fe93 	bl	8001d6a <HAL_GPIO_WritePin>
                          |LED_YEL2_Pin|LED_GRE2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|ROW2_Pin
 8001044:	2200      	movs	r2, #0
 8001046:	f64f 717f 	movw	r1, #65407	; 0xff7f
 800104a:	481b      	ldr	r0, [pc, #108]	; (80010b8 <MX_GPIO_Init+0xdc>)
 800104c:	f000 fe8d 	bl	8001d6a <HAL_GPIO_WritePin>
                          |ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin
                          |ROW7_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin|ROW0_Pin|ROW1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 8001050:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001054:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800105a:	2301      	movs	r3, #1
 800105c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800105e:	f107 0310 	add.w	r3, r7, #16
 8001062:	4619      	mov	r1, r3
 8001064:	4815      	ldr	r0, [pc, #84]	; (80010bc <MX_GPIO_Init+0xe0>)
 8001066:	f000 fcef 	bl	8001a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED1_Pin LED_YEL1_Pin LED_GRE1_Pin LED_RED2_Pin
                           LED_YEL2_Pin LED_GRE2_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin ENM4_Pin ENM5_Pin
                           ENM6_Pin ENM7_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin|LED_YEL1_Pin|LED_GRE1_Pin|LED_RED2_Pin
 800106a:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800106e:	613b      	str	r3, [r7, #16]
                          |LED_YEL2_Pin|LED_GRE2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001070:	2301      	movs	r3, #1
 8001072:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001078:	2302      	movs	r3, #2
 800107a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107c:	f107 0310 	add.w	r3, r7, #16
 8001080:	4619      	mov	r1, r3
 8001082:	480c      	ldr	r0, [pc, #48]	; (80010b4 <MX_GPIO_Init+0xd8>)
 8001084:	f000 fce0 	bl	8001a48 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin ROW2_Pin
                           ROW3_Pin ROW4_Pin ROW5_Pin ROW6_Pin
                           ROW7_Pin SEG3_Pin SEG4_Pin SEG5_Pin
                           SEG6_Pin ROW0_Pin ROW1_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|ROW2_Pin
 8001088:	f64f 737f 	movw	r3, #65407	; 0xff7f
 800108c:	613b      	str	r3, [r7, #16]
                          |ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin
                          |ROW7_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin|ROW0_Pin|ROW1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108e:	2301      	movs	r3, #1
 8001090:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	2302      	movs	r3, #2
 8001098:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109a:	f107 0310 	add.w	r3, r7, #16
 800109e:	4619      	mov	r1, r3
 80010a0:	4805      	ldr	r0, [pc, #20]	; (80010b8 <MX_GPIO_Init+0xdc>)
 80010a2:	f000 fcd1 	bl	8001a48 <HAL_GPIO_Init>

}
 80010a6:	bf00      	nop
 80010a8:	3720      	adds	r7, #32
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40021000 	.word	0x40021000
 80010b4:	40010800 	.word	0x40010800
 80010b8:	40010c00 	.word	0x40010c00
 80010bc:	40011000 	.word	0x40011000

080010c0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//int counter = 100;
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
//		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin) ;
//	}
	//ex1();
	//ex2();
	//ex4();
	timerRun();
 80010c8:	f000 f8c4 	bl	8001254 <timerRun>
	getKeyInput();
 80010cc:	f7ff f898 	bl	8000200 <getKeyInput>
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010dc:	b672      	cpsid	i
}
 80010de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <Error_Handler+0x8>
	...

080010e4 <setTimer1>:
int counter_yel = 2;
int counter_gre = 3;


void setTimer1(int duration)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
	timer1_counter = duration * 100;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2264      	movs	r2, #100	; 0x64
 80010f0:	fb02 f303 	mul.w	r3, r2, r3
 80010f4:	4a04      	ldr	r2, [pc, #16]	; (8001108 <setTimer1+0x24>)
 80010f6:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80010f8:	4b04      	ldr	r3, [pc, #16]	; (800110c <setTimer1+0x28>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr
 8001108:	200000e8 	.word	0x200000e8
 800110c:	200000ec 	.word	0x200000ec

08001110 <setTimer2>:

void setTimer2(int duration)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	timer2_counter = duration * 100;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2264      	movs	r2, #100	; 0x64
 800111c:	fb02 f303 	mul.w	r3, r2, r3
 8001120:	4a04      	ldr	r2, [pc, #16]	; (8001134 <setTimer2+0x24>)
 8001122:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001124:	4b04      	ldr	r3, [pc, #16]	; (8001138 <setTimer2+0x28>)
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr
 8001134:	200000f0 	.word	0x200000f0
 8001138:	200000f4 	.word	0x200000f4

0800113c <setTimer7segment1>:
	timer3_counter = duration;
	timer3_flag = 0;
}

void setTimer7segment1(int duration)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	segment1_counter = duration;
 8001144:	4a05      	ldr	r2, [pc, #20]	; (800115c <setTimer7segment1+0x20>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6013      	str	r3, [r2, #0]
	segment1_flag = 0;
 800114a:	4b05      	ldr	r3, [pc, #20]	; (8001160 <setTimer7segment1+0x24>)
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	20000120 	.word	0x20000120
 8001160:	20000118 	.word	0x20000118

08001164 <setTimer7segment2>:
void setTimer7segment2(int duration)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
	segment2_counter = duration;
 800116c:	4a05      	ldr	r2, [pc, #20]	; (8001184 <setTimer7segment2+0x20>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6013      	str	r3, [r2, #0]
	segment2_flag = 0;
 8001172:	4b05      	ldr	r3, [pc, #20]	; (8001188 <setTimer7segment2+0x24>)
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20000124 	.word	0x20000124
 8001188:	2000011c 	.word	0x2000011c

0800118c <setTimerLedRed>:


void setTimerLedRed(int duration)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
	timerLedRed_counter = duration;
 8001194:	4a05      	ldr	r2, [pc, #20]	; (80011ac <setTimerLedRed+0x20>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6013      	str	r3, [r2, #0]
	timerLedRed_flag = 0;
 800119a:	4b05      	ldr	r3, [pc, #20]	; (80011b0 <setTimerLedRed+0x24>)
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	2000010c 	.word	0x2000010c
 80011b0:	20000100 	.word	0x20000100

080011b4 <setTimerLedYel>:

void setTimerLedYel(int duration)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	timerLedYel_counter = duration;
 80011bc:	4a05      	ldr	r2, [pc, #20]	; (80011d4 <setTimerLedYel+0x20>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6013      	str	r3, [r2, #0]
	timerLedYel_flag = 0;
 80011c2:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <setTimerLedYel+0x24>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	20000110 	.word	0x20000110
 80011d8:	20000104 	.word	0x20000104

080011dc <setTimerLedGre>:

void setTimerLedGre(int duration)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	timerLedGre_counter = duration;
 80011e4:	4a05      	ldr	r2, [pc, #20]	; (80011fc <setTimerLedGre+0x20>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6013      	str	r3, [r2, #0]
	timerLedGre_flag = 0;
 80011ea:	4b05      	ldr	r3, [pc, #20]	; (8001200 <setTimerLedGre+0x24>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	20000114 	.word	0x20000114
 8001200:	20000108 	.word	0x20000108

08001204 <TurnOnRed>:

void TurnOnRed()
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	setTimerLedRed(50);
 8001208:	2032      	movs	r0, #50	; 0x32
 800120a:	f7ff ffbf 	bl	800118c <setTimerLedRed>
	setTimerLedYel(0);
 800120e:	2000      	movs	r0, #0
 8001210:	f7ff ffd0 	bl	80011b4 <setTimerLedYel>
	setTimerLedGre(0);
 8001214:	2000      	movs	r0, #0
 8001216:	f7ff ffe1 	bl	80011dc <setTimerLedGre>
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}

0800121e <TurnOnYel>:

void TurnOnYel()
{
 800121e:	b580      	push	{r7, lr}
 8001220:	af00      	add	r7, sp, #0
	setTimerLedRed(0);
 8001222:	2000      	movs	r0, #0
 8001224:	f7ff ffb2 	bl	800118c <setTimerLedRed>
	setTimerLedYel(50);
 8001228:	2032      	movs	r0, #50	; 0x32
 800122a:	f7ff ffc3 	bl	80011b4 <setTimerLedYel>
	setTimerLedGre(0);
 800122e:	2000      	movs	r0, #0
 8001230:	f7ff ffd4 	bl	80011dc <setTimerLedGre>
}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}

08001238 <TurnOnGre>:

void TurnOnGre()
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	setTimerLedRed(0);
 800123c:	2000      	movs	r0, #0
 800123e:	f7ff ffa5 	bl	800118c <setTimerLedRed>
	setTimerLedYel(0);
 8001242:	2000      	movs	r0, #0
 8001244:	f7ff ffb6 	bl	80011b4 <setTimerLedYel>
	setTimerLedGre(50);
 8001248:	2032      	movs	r0, #50	; 0x32
 800124a:	f7ff ffc7 	bl	80011dc <setTimerLedGre>
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <timerRun>:

void timerRun()
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
	if(timer1_counter > 0)
 8001258:	4b4b      	ldr	r3, [pc, #300]	; (8001388 <timerRun+0x134>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	dd15      	ble.n	800128c <timerRun+0x38>
	{
		counter_7seg1 = timer1_counter / 100;
 8001260:	4b49      	ldr	r3, [pc, #292]	; (8001388 <timerRun+0x134>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a49      	ldr	r2, [pc, #292]	; (800138c <timerRun+0x138>)
 8001266:	fb82 1203 	smull	r1, r2, r2, r3
 800126a:	1152      	asrs	r2, r2, #5
 800126c:	17db      	asrs	r3, r3, #31
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	4a47      	ldr	r2, [pc, #284]	; (8001390 <timerRun+0x13c>)
 8001272:	6013      	str	r3, [r2, #0]
		timer1_counter --;
 8001274:	4b44      	ldr	r3, [pc, #272]	; (8001388 <timerRun+0x134>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	3b01      	subs	r3, #1
 800127a:	4a43      	ldr	r2, [pc, #268]	; (8001388 <timerRun+0x134>)
 800127c:	6013      	str	r3, [r2, #0]

		if(timer1_counter <= 0)
 800127e:	4b42      	ldr	r3, [pc, #264]	; (8001388 <timerRun+0x134>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	dc02      	bgt.n	800128c <timerRun+0x38>
			timer1_flag = 1;
 8001286:	4b43      	ldr	r3, [pc, #268]	; (8001394 <timerRun+0x140>)
 8001288:	2201      	movs	r2, #1
 800128a:	601a      	str	r2, [r3, #0]
	}

	if(timer2_counter > 0)
 800128c:	4b42      	ldr	r3, [pc, #264]	; (8001398 <timerRun+0x144>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	dd15      	ble.n	80012c0 <timerRun+0x6c>
	{
		counter_7seg2 = timer2_counter / 100;
 8001294:	4b40      	ldr	r3, [pc, #256]	; (8001398 <timerRun+0x144>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a3c      	ldr	r2, [pc, #240]	; (800138c <timerRun+0x138>)
 800129a:	fb82 1203 	smull	r1, r2, r2, r3
 800129e:	1152      	asrs	r2, r2, #5
 80012a0:	17db      	asrs	r3, r3, #31
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	4a3d      	ldr	r2, [pc, #244]	; (800139c <timerRun+0x148>)
 80012a6:	6013      	str	r3, [r2, #0]
		timer2_counter --;
 80012a8:	4b3b      	ldr	r3, [pc, #236]	; (8001398 <timerRun+0x144>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	3b01      	subs	r3, #1
 80012ae:	4a3a      	ldr	r2, [pc, #232]	; (8001398 <timerRun+0x144>)
 80012b0:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0)
 80012b2:	4b39      	ldr	r3, [pc, #228]	; (8001398 <timerRun+0x144>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	dc02      	bgt.n	80012c0 <timerRun+0x6c>
			timer2_flag = 1;
 80012ba:	4b39      	ldr	r3, [pc, #228]	; (80013a0 <timerRun+0x14c>)
 80012bc:	2201      	movs	r2, #1
 80012be:	601a      	str	r2, [r3, #0]
	}

	if(timer3_counter > 0)
 80012c0:	4b38      	ldr	r3, [pc, #224]	; (80013a4 <timerRun+0x150>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	dd0b      	ble.n	80012e0 <timerRun+0x8c>
	{
		timer3_counter --;
 80012c8:	4b36      	ldr	r3, [pc, #216]	; (80013a4 <timerRun+0x150>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	3b01      	subs	r3, #1
 80012ce:	4a35      	ldr	r2, [pc, #212]	; (80013a4 <timerRun+0x150>)
 80012d0:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0)
 80012d2:	4b34      	ldr	r3, [pc, #208]	; (80013a4 <timerRun+0x150>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	dc02      	bgt.n	80012e0 <timerRun+0x8c>
			timer3_flag = 1;
 80012da:	4b33      	ldr	r3, [pc, #204]	; (80013a8 <timerRun+0x154>)
 80012dc:	2201      	movs	r2, #1
 80012de:	601a      	str	r2, [r3, #0]
	}

	if(timerLedRed_counter > 0)
 80012e0:	4b32      	ldr	r3, [pc, #200]	; (80013ac <timerRun+0x158>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	dd0b      	ble.n	8001300 <timerRun+0xac>
	{
		timerLedRed_counter --;
 80012e8:	4b30      	ldr	r3, [pc, #192]	; (80013ac <timerRun+0x158>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	3b01      	subs	r3, #1
 80012ee:	4a2f      	ldr	r2, [pc, #188]	; (80013ac <timerRun+0x158>)
 80012f0:	6013      	str	r3, [r2, #0]
		if(timerLedRed_counter <= 0)
 80012f2:	4b2e      	ldr	r3, [pc, #184]	; (80013ac <timerRun+0x158>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	dc02      	bgt.n	8001300 <timerRun+0xac>
			timerLedRed_flag = 1;
 80012fa:	4b2d      	ldr	r3, [pc, #180]	; (80013b0 <timerRun+0x15c>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	601a      	str	r2, [r3, #0]
	}

	if(timerLedYel_counter > 0)
 8001300:	4b2c      	ldr	r3, [pc, #176]	; (80013b4 <timerRun+0x160>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	dd0b      	ble.n	8001320 <timerRun+0xcc>
	{
		timerLedYel_counter --;
 8001308:	4b2a      	ldr	r3, [pc, #168]	; (80013b4 <timerRun+0x160>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	3b01      	subs	r3, #1
 800130e:	4a29      	ldr	r2, [pc, #164]	; (80013b4 <timerRun+0x160>)
 8001310:	6013      	str	r3, [r2, #0]
		if(timerLedYel_counter <= 0)
 8001312:	4b28      	ldr	r3, [pc, #160]	; (80013b4 <timerRun+0x160>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	dc02      	bgt.n	8001320 <timerRun+0xcc>
			timerLedYel_flag = 1;
 800131a:	4b27      	ldr	r3, [pc, #156]	; (80013b8 <timerRun+0x164>)
 800131c:	2201      	movs	r2, #1
 800131e:	601a      	str	r2, [r3, #0]
	}

	if(timerLedGre_counter > 0)
 8001320:	4b26      	ldr	r3, [pc, #152]	; (80013bc <timerRun+0x168>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	dd0b      	ble.n	8001340 <timerRun+0xec>
	{
		timerLedGre_counter --;
 8001328:	4b24      	ldr	r3, [pc, #144]	; (80013bc <timerRun+0x168>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	3b01      	subs	r3, #1
 800132e:	4a23      	ldr	r2, [pc, #140]	; (80013bc <timerRun+0x168>)
 8001330:	6013      	str	r3, [r2, #0]
		if(timerLedGre_counter <= 0)
 8001332:	4b22      	ldr	r3, [pc, #136]	; (80013bc <timerRun+0x168>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	dc02      	bgt.n	8001340 <timerRun+0xec>
			timerLedGre_flag = 1;
 800133a:	4b21      	ldr	r3, [pc, #132]	; (80013c0 <timerRun+0x16c>)
 800133c:	2201      	movs	r2, #1
 800133e:	601a      	str	r2, [r3, #0]
	}

	if(segment1_counter > 0)
 8001340:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <timerRun+0x170>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	dd0b      	ble.n	8001360 <timerRun+0x10c>
	{
		segment1_counter --;
 8001348:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <timerRun+0x170>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	3b01      	subs	r3, #1
 800134e:	4a1d      	ldr	r2, [pc, #116]	; (80013c4 <timerRun+0x170>)
 8001350:	6013      	str	r3, [r2, #0]
		if(segment1_counter <= 0)
 8001352:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <timerRun+0x170>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	dc02      	bgt.n	8001360 <timerRun+0x10c>
			segment1_flag = 1;
 800135a:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <timerRun+0x174>)
 800135c:	2201      	movs	r2, #1
 800135e:	601a      	str	r2, [r3, #0]
	}

	if(segment2_counter > 0)
 8001360:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <timerRun+0x178>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	dd0b      	ble.n	8001380 <timerRun+0x12c>
	{
		segment2_counter --;
 8001368:	4b18      	ldr	r3, [pc, #96]	; (80013cc <timerRun+0x178>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	3b01      	subs	r3, #1
 800136e:	4a17      	ldr	r2, [pc, #92]	; (80013cc <timerRun+0x178>)
 8001370:	6013      	str	r3, [r2, #0]
		if(segment2_counter <= 0)
 8001372:	4b16      	ldr	r3, [pc, #88]	; (80013cc <timerRun+0x178>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	dc02      	bgt.n	8001380 <timerRun+0x12c>
			segment2_flag = 1;
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <timerRun+0x17c>)
 800137c:	2201      	movs	r2, #1
 800137e:	601a      	str	r2, [r3, #0]
	}


}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr
 8001388:	200000e8 	.word	0x200000e8
 800138c:	51eb851f 	.word	0x51eb851f
 8001390:	200000d4 	.word	0x200000d4
 8001394:	200000ec 	.word	0x200000ec
 8001398:	200000f0 	.word	0x200000f0
 800139c:	200000d8 	.word	0x200000d8
 80013a0:	200000f4 	.word	0x200000f4
 80013a4:	200000f8 	.word	0x200000f8
 80013a8:	200000fc 	.word	0x200000fc
 80013ac:	2000010c 	.word	0x2000010c
 80013b0:	20000100 	.word	0x20000100
 80013b4:	20000110 	.word	0x20000110
 80013b8:	20000104 	.word	0x20000104
 80013bc:	20000114 	.word	0x20000114
 80013c0:	20000108 	.word	0x20000108
 80013c4:	20000120 	.word	0x20000120
 80013c8:	20000118 	.word	0x20000118
 80013cc:	20000124 	.word	0x20000124
 80013d0:	2000011c 	.word	0x2000011c

080013d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013da:	4b15      	ldr	r3, [pc, #84]	; (8001430 <HAL_MspInit+0x5c>)
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	4a14      	ldr	r2, [pc, #80]	; (8001430 <HAL_MspInit+0x5c>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6193      	str	r3, [r2, #24]
 80013e6:	4b12      	ldr	r3, [pc, #72]	; (8001430 <HAL_MspInit+0x5c>)
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f2:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <HAL_MspInit+0x5c>)
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	4a0e      	ldr	r2, [pc, #56]	; (8001430 <HAL_MspInit+0x5c>)
 80013f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013fc:	61d3      	str	r3, [r2, #28]
 80013fe:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <HAL_MspInit+0x5c>)
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800140a:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <HAL_MspInit+0x60>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	4a04      	ldr	r2, [pc, #16]	; (8001434 <HAL_MspInit+0x60>)
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001426:	bf00      	nop
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	40021000 	.word	0x40021000
 8001434:	40010000 	.word	0x40010000

08001438 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001448:	d113      	bne.n	8001472 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800144a:	4b0c      	ldr	r3, [pc, #48]	; (800147c <HAL_TIM_Base_MspInit+0x44>)
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	4a0b      	ldr	r2, [pc, #44]	; (800147c <HAL_TIM_Base_MspInit+0x44>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	61d3      	str	r3, [r2, #28]
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <HAL_TIM_Base_MspInit+0x44>)
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2100      	movs	r1, #0
 8001466:	201c      	movs	r0, #28
 8001468:	f000 fab7 	bl	80019da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800146c:	201c      	movs	r0, #28
 800146e:	f000 fad0 	bl	8001a12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001472:	bf00      	nop
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40021000 	.word	0x40021000

08001480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <NMI_Handler+0x4>

08001486 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <HardFault_Handler+0x4>

0800148c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <MemManage_Handler+0x4>

08001492 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001496:	e7fe      	b.n	8001496 <BusFault_Handler+0x4>

08001498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800149c:	e7fe      	b.n	800149c <UsageFault_Handler+0x4>

0800149e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr

080014aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr

080014b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc80      	pop	{r7}
 80014c0:	4770      	bx	lr

080014c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c6:	f000 f995 	bl	80017f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014d4:	4802      	ldr	r0, [pc, #8]	; (80014e0 <TIM2_IRQHandler+0x10>)
 80014d6:	f001 f8f1 	bl	80026bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000150 	.word	0x20000150

080014e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr

080014f0 <initial1>:
#include "traffic_light.h"
#include "software_timer.h"
#include "main.h"

void initial1()
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, 0);
 80014f4:	2200      	movs	r2, #0
 80014f6:	2104      	movs	r1, #4
 80014f8:	4807      	ldr	r0, [pc, #28]	; (8001518 <initial1+0x28>)
 80014fa:	f000 fc36 	bl	8001d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YEL1_GPIO_Port, LED_YEL1_Pin, 0);
 80014fe:	2200      	movs	r2, #0
 8001500:	2108      	movs	r1, #8
 8001502:	4805      	ldr	r0, [pc, #20]	; (8001518 <initial1+0x28>)
 8001504:	f000 fc31 	bl	8001d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GRE1_GPIO_Port, LED_GRE1_Pin, 0);
 8001508:	2200      	movs	r2, #0
 800150a:	2110      	movs	r1, #16
 800150c:	4802      	ldr	r0, [pc, #8]	; (8001518 <initial1+0x28>)
 800150e:	f000 fc2c 	bl	8001d6a <HAL_GPIO_WritePin>
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40010800 	.word	0x40010800

0800151c <initial2>:

void initial2()
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, 0);
 8001520:	2200      	movs	r2, #0
 8001522:	2120      	movs	r1, #32
 8001524:	4807      	ldr	r0, [pc, #28]	; (8001544 <initial2+0x28>)
 8001526:	f000 fc20 	bl	8001d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YEL2_GPIO_Port, LED_YEL2_Pin, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	2140      	movs	r1, #64	; 0x40
 800152e:	4805      	ldr	r0, [pc, #20]	; (8001544 <initial2+0x28>)
 8001530:	f000 fc1b 	bl	8001d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GRE2_GPIO_Port, LED_GRE2_Pin, 0);
 8001534:	2200      	movs	r2, #0
 8001536:	2180      	movs	r1, #128	; 0x80
 8001538:	4802      	ldr	r0, [pc, #8]	; (8001544 <initial2+0x28>)
 800153a:	f000 fc16 	bl	8001d6a <HAL_GPIO_WritePin>
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40010800 	.word	0x40010800

08001548 <setRED1>:

void setRED1()
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, 1);
 800154c:	2201      	movs	r2, #1
 800154e:	2104      	movs	r1, #4
 8001550:	4807      	ldr	r0, [pc, #28]	; (8001570 <setRED1+0x28>)
 8001552:	f000 fc0a 	bl	8001d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YEL1_GPIO_Port, LED_YEL1_Pin, 0);
 8001556:	2200      	movs	r2, #0
 8001558:	2108      	movs	r1, #8
 800155a:	4805      	ldr	r0, [pc, #20]	; (8001570 <setRED1+0x28>)
 800155c:	f000 fc05 	bl	8001d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GRE1_GPIO_Port, LED_GRE1_Pin, 0);
 8001560:	2200      	movs	r2, #0
 8001562:	2110      	movs	r1, #16
 8001564:	4802      	ldr	r0, [pc, #8]	; (8001570 <setRED1+0x28>)
 8001566:	f000 fc00 	bl	8001d6a <HAL_GPIO_WritePin>
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40010800 	.word	0x40010800

08001574 <setRED2>:
void setRED2()
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, 1);
 8001578:	2201      	movs	r2, #1
 800157a:	2120      	movs	r1, #32
 800157c:	4807      	ldr	r0, [pc, #28]	; (800159c <setRED2+0x28>)
 800157e:	f000 fbf4 	bl	8001d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YEL2_GPIO_Port, LED_YEL2_Pin, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	2140      	movs	r1, #64	; 0x40
 8001586:	4805      	ldr	r0, [pc, #20]	; (800159c <setRED2+0x28>)
 8001588:	f000 fbef 	bl	8001d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GRE2_GPIO_Port, LED_GRE2_Pin, 0);
 800158c:	2200      	movs	r2, #0
 800158e:	2180      	movs	r1, #128	; 0x80
 8001590:	4802      	ldr	r0, [pc, #8]	; (800159c <setRED2+0x28>)
 8001592:	f000 fbea 	bl	8001d6a <HAL_GPIO_WritePin>
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40010800 	.word	0x40010800

080015a0 <setYEL1>:
void setYEL1()
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, 0);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2104      	movs	r1, #4
 80015a8:	4807      	ldr	r0, [pc, #28]	; (80015c8 <setYEL1+0x28>)
 80015aa:	f000 fbde 	bl	8001d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YEL1_GPIO_Port, LED_YEL1_Pin, 1);
 80015ae:	2201      	movs	r2, #1
 80015b0:	2108      	movs	r1, #8
 80015b2:	4805      	ldr	r0, [pc, #20]	; (80015c8 <setYEL1+0x28>)
 80015b4:	f000 fbd9 	bl	8001d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GRE1_GPIO_Port, LED_GRE1_Pin, 0);
 80015b8:	2200      	movs	r2, #0
 80015ba:	2110      	movs	r1, #16
 80015bc:	4802      	ldr	r0, [pc, #8]	; (80015c8 <setYEL1+0x28>)
 80015be:	f000 fbd4 	bl	8001d6a <HAL_GPIO_WritePin>
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40010800 	.word	0x40010800

080015cc <setYEL2>:
void setYEL2()
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, 0);
 80015d0:	2200      	movs	r2, #0
 80015d2:	2120      	movs	r1, #32
 80015d4:	4807      	ldr	r0, [pc, #28]	; (80015f4 <setYEL2+0x28>)
 80015d6:	f000 fbc8 	bl	8001d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YEL2_GPIO_Port, LED_YEL2_Pin, 1);
 80015da:	2201      	movs	r2, #1
 80015dc:	2140      	movs	r1, #64	; 0x40
 80015de:	4805      	ldr	r0, [pc, #20]	; (80015f4 <setYEL2+0x28>)
 80015e0:	f000 fbc3 	bl	8001d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GRE2_GPIO_Port, LED_GRE2_Pin, 0);
 80015e4:	2200      	movs	r2, #0
 80015e6:	2180      	movs	r1, #128	; 0x80
 80015e8:	4802      	ldr	r0, [pc, #8]	; (80015f4 <setYEL2+0x28>)
 80015ea:	f000 fbbe 	bl	8001d6a <HAL_GPIO_WritePin>
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40010800 	.word	0x40010800

080015f8 <setGRE1>:
void setGRE1()
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, 0);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2104      	movs	r1, #4
 8001600:	4807      	ldr	r0, [pc, #28]	; (8001620 <setGRE1+0x28>)
 8001602:	f000 fbb2 	bl	8001d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YEL1_GPIO_Port, LED_YEL1_Pin, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2108      	movs	r1, #8
 800160a:	4805      	ldr	r0, [pc, #20]	; (8001620 <setGRE1+0x28>)
 800160c:	f000 fbad 	bl	8001d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GRE1_GPIO_Port, LED_GRE1_Pin, 1);
 8001610:	2201      	movs	r2, #1
 8001612:	2110      	movs	r1, #16
 8001614:	4802      	ldr	r0, [pc, #8]	; (8001620 <setGRE1+0x28>)
 8001616:	f000 fba8 	bl	8001d6a <HAL_GPIO_WritePin>
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40010800 	.word	0x40010800

08001624 <setGRE2>:
void setGRE2()
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, 0);
 8001628:	2200      	movs	r2, #0
 800162a:	2120      	movs	r1, #32
 800162c:	4807      	ldr	r0, [pc, #28]	; (800164c <setGRE2+0x28>)
 800162e:	f000 fb9c 	bl	8001d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YEL2_GPIO_Port, LED_YEL2_Pin, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2140      	movs	r1, #64	; 0x40
 8001636:	4805      	ldr	r0, [pc, #20]	; (800164c <setGRE2+0x28>)
 8001638:	f000 fb97 	bl	8001d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GRE2_GPIO_Port, LED_GRE2_Pin, 1);
 800163c:	2201      	movs	r2, #1
 800163e:	2180      	movs	r1, #128	; 0x80
 8001640:	4802      	ldr	r0, [pc, #8]	; (800164c <setGRE2+0x28>)
 8001642:	f000 fb92 	bl	8001d6a <HAL_GPIO_WritePin>
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40010800 	.word	0x40010800

08001650 <blinkRED>:

void blinkRED()
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 8001654:	2104      	movs	r1, #4
 8001656:	480e      	ldr	r0, [pc, #56]	; (8001690 <blinkRED+0x40>)
 8001658:	f000 fb9f 	bl	8001d9a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_RED2_GPIO_Port, LED_RED2_Pin);
 800165c:	2120      	movs	r1, #32
 800165e:	480c      	ldr	r0, [pc, #48]	; (8001690 <blinkRED+0x40>)
 8001660:	f000 fb9b 	bl	8001d9a <HAL_GPIO_TogglePin>
//	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, 1);
//	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, 1);
	HAL_GPIO_WritePin(LED_YEL1_GPIO_Port, LED_YEL1_Pin, 0);
 8001664:	2200      	movs	r2, #0
 8001666:	2108      	movs	r1, #8
 8001668:	4809      	ldr	r0, [pc, #36]	; (8001690 <blinkRED+0x40>)
 800166a:	f000 fb7e 	bl	8001d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GRE1_GPIO_Port, LED_GRE1_Pin, 0);
 800166e:	2200      	movs	r2, #0
 8001670:	2110      	movs	r1, #16
 8001672:	4807      	ldr	r0, [pc, #28]	; (8001690 <blinkRED+0x40>)
 8001674:	f000 fb79 	bl	8001d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YEL2_GPIO_Port, LED_YEL2_Pin, 0);
 8001678:	2200      	movs	r2, #0
 800167a:	2140      	movs	r1, #64	; 0x40
 800167c:	4804      	ldr	r0, [pc, #16]	; (8001690 <blinkRED+0x40>)
 800167e:	f000 fb74 	bl	8001d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GRE2_GPIO_Port, LED_GRE2_Pin, 0);
 8001682:	2200      	movs	r2, #0
 8001684:	2180      	movs	r1, #128	; 0x80
 8001686:	4802      	ldr	r0, [pc, #8]	; (8001690 <blinkRED+0x40>)
 8001688:	f000 fb6f 	bl	8001d6a <HAL_GPIO_WritePin>
}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40010800 	.word	0x40010800

08001694 <blinkYEL>:

void blinkYEL()
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_YEL1_GPIO_Port, LED_YEL1_Pin);
 8001698:	2108      	movs	r1, #8
 800169a:	480e      	ldr	r0, [pc, #56]	; (80016d4 <blinkYEL+0x40>)
 800169c:	f000 fb7d 	bl	8001d9a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_YEL2_GPIO_Port, LED_YEL2_Pin);
 80016a0:	2140      	movs	r1, #64	; 0x40
 80016a2:	480c      	ldr	r0, [pc, #48]	; (80016d4 <blinkYEL+0x40>)
 80016a4:	f000 fb79 	bl	8001d9a <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, 0);
 80016a8:	2200      	movs	r2, #0
 80016aa:	2104      	movs	r1, #4
 80016ac:	4809      	ldr	r0, [pc, #36]	; (80016d4 <blinkYEL+0x40>)
 80016ae:	f000 fb5c 	bl	8001d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GRE1_GPIO_Port, LED_GRE1_Pin, 0);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2110      	movs	r1, #16
 80016b6:	4807      	ldr	r0, [pc, #28]	; (80016d4 <blinkYEL+0x40>)
 80016b8:	f000 fb57 	bl	8001d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, 0);
 80016bc:	2200      	movs	r2, #0
 80016be:	2120      	movs	r1, #32
 80016c0:	4804      	ldr	r0, [pc, #16]	; (80016d4 <blinkYEL+0x40>)
 80016c2:	f000 fb52 	bl	8001d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GRE2_GPIO_Port, LED_GRE2_Pin, 0);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2180      	movs	r1, #128	; 0x80
 80016ca:	4802      	ldr	r0, [pc, #8]	; (80016d4 <blinkYEL+0x40>)
 80016cc:	f000 fb4d 	bl	8001d6a <HAL_GPIO_WritePin>
}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40010800 	.word	0x40010800

080016d8 <blinkGRE>:

void blinkGRE()
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GRE1_GPIO_Port, LED_GRE1_Pin);
 80016dc:	2110      	movs	r1, #16
 80016de:	480e      	ldr	r0, [pc, #56]	; (8001718 <blinkGRE+0x40>)
 80016e0:	f000 fb5b 	bl	8001d9a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED_GRE2_GPIO_Port, LED_GRE2_Pin);
 80016e4:	2180      	movs	r1, #128	; 0x80
 80016e6:	480c      	ldr	r0, [pc, #48]	; (8001718 <blinkGRE+0x40>)
 80016e8:	f000 fb57 	bl	8001d9a <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, 0);
 80016ec:	2200      	movs	r2, #0
 80016ee:	2104      	movs	r1, #4
 80016f0:	4809      	ldr	r0, [pc, #36]	; (8001718 <blinkGRE+0x40>)
 80016f2:	f000 fb3a 	bl	8001d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YEL1_GPIO_Port, LED_YEL1_Pin, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2108      	movs	r1, #8
 80016fa:	4807      	ldr	r0, [pc, #28]	; (8001718 <blinkGRE+0x40>)
 80016fc:	f000 fb35 	bl	8001d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, 0);
 8001700:	2200      	movs	r2, #0
 8001702:	2120      	movs	r1, #32
 8001704:	4804      	ldr	r0, [pc, #16]	; (8001718 <blinkGRE+0x40>)
 8001706:	f000 fb30 	bl	8001d6a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YEL2_GPIO_Port, LED_YEL2_Pin, 0);
 800170a:	2200      	movs	r2, #0
 800170c:	2140      	movs	r1, #64	; 0x40
 800170e:	4802      	ldr	r0, [pc, #8]	; (8001718 <blinkGRE+0x40>)
 8001710:	f000 fb2b 	bl	8001d6a <HAL_GPIO_WritePin>
}
 8001714:	bf00      	nop
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40010800 	.word	0x40010800

0800171c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800171c:	f7ff fee2 	bl	80014e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001720:	480b      	ldr	r0, [pc, #44]	; (8001750 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001722:	490c      	ldr	r1, [pc, #48]	; (8001754 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001724:	4a0c      	ldr	r2, [pc, #48]	; (8001758 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001728:	e002      	b.n	8001730 <LoopCopyDataInit>

0800172a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800172a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800172c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172e:	3304      	adds	r3, #4

08001730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001734:	d3f9      	bcc.n	800172a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001736:	4a09      	ldr	r2, [pc, #36]	; (800175c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001738:	4c09      	ldr	r4, [pc, #36]	; (8001760 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800173a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800173c:	e001      	b.n	8001742 <LoopFillZerobss>

0800173e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001740:	3204      	adds	r2, #4

08001742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001744:	d3fb      	bcc.n	800173e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001746:	f001 faf9 	bl	8002d3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800174a:	f7ff fb99 	bl	8000e80 <main>
  bx lr
 800174e:	4770      	bx	lr
  ldr r0, =_sdata
 8001750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001754:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001758:	08002dd8 	.word	0x08002dd8
  ldr r2, =_sbss
 800175c:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001760:	2000019c 	.word	0x2000019c

08001764 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001764:	e7fe      	b.n	8001764 <ADC1_2_IRQHandler>
	...

08001768 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800176c:	4b08      	ldr	r3, [pc, #32]	; (8001790 <HAL_Init+0x28>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a07      	ldr	r2, [pc, #28]	; (8001790 <HAL_Init+0x28>)
 8001772:	f043 0310 	orr.w	r3, r3, #16
 8001776:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001778:	2003      	movs	r0, #3
 800177a:	f000 f923 	bl	80019c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800177e:	200f      	movs	r0, #15
 8001780:	f000 f808 	bl	8001794 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001784:	f7ff fe26 	bl	80013d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40022000 	.word	0x40022000

08001794 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <HAL_InitTick+0x54>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4b12      	ldr	r3, [pc, #72]	; (80017ec <HAL_InitTick+0x58>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	4619      	mov	r1, r3
 80017a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 f93b 	bl	8001a2e <HAL_SYSTICK_Config>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e00e      	b.n	80017e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b0f      	cmp	r3, #15
 80017c6:	d80a      	bhi.n	80017de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c8:	2200      	movs	r2, #0
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	f04f 30ff 	mov.w	r0, #4294967295
 80017d0:	f000 f903 	bl	80019da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017d4:	4a06      	ldr	r2, [pc, #24]	; (80017f0 <HAL_InitTick+0x5c>)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017da:	2300      	movs	r3, #0
 80017dc:	e000      	b.n	80017e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000088 	.word	0x20000088
 80017ec:	20000090 	.word	0x20000090
 80017f0:	2000008c 	.word	0x2000008c

080017f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <HAL_IncTick+0x1c>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	461a      	mov	r2, r3
 80017fe:	4b05      	ldr	r3, [pc, #20]	; (8001814 <HAL_IncTick+0x20>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4413      	add	r3, r2
 8001804:	4a03      	ldr	r2, [pc, #12]	; (8001814 <HAL_IncTick+0x20>)
 8001806:	6013      	str	r3, [r2, #0]
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr
 8001810:	20000090 	.word	0x20000090
 8001814:	20000198 	.word	0x20000198

08001818 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return uwTick;
 800181c:	4b02      	ldr	r3, [pc, #8]	; (8001828 <HAL_GetTick+0x10>)
 800181e:	681b      	ldr	r3, [r3, #0]
}
 8001820:	4618      	mov	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr
 8001828:	20000198 	.word	0x20000198

0800182c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800183c:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <__NVIC_SetPriorityGrouping+0x44>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001842:	68ba      	ldr	r2, [r7, #8]
 8001844:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001848:	4013      	ands	r3, r2
 800184a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001854:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800185c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800185e:	4a04      	ldr	r2, [pc, #16]	; (8001870 <__NVIC_SetPriorityGrouping+0x44>)
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	60d3      	str	r3, [r2, #12]
}
 8001864:	bf00      	nop
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	bc80      	pop	{r7}
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001878:	4b04      	ldr	r3, [pc, #16]	; (800188c <__NVIC_GetPriorityGrouping+0x18>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	0a1b      	lsrs	r3, r3, #8
 800187e:	f003 0307 	and.w	r3, r3, #7
}
 8001882:	4618      	mov	r0, r3
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800189a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	db0b      	blt.n	80018ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	f003 021f 	and.w	r2, r3, #31
 80018a8:	4906      	ldr	r1, [pc, #24]	; (80018c4 <__NVIC_EnableIRQ+0x34>)
 80018aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ae:	095b      	lsrs	r3, r3, #5
 80018b0:	2001      	movs	r0, #1
 80018b2:	fa00 f202 	lsl.w	r2, r0, r2
 80018b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr
 80018c4:	e000e100 	.word	0xe000e100

080018c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	6039      	str	r1, [r7, #0]
 80018d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	db0a      	blt.n	80018f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	490c      	ldr	r1, [pc, #48]	; (8001914 <__NVIC_SetPriority+0x4c>)
 80018e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e6:	0112      	lsls	r2, r2, #4
 80018e8:	b2d2      	uxtb	r2, r2
 80018ea:	440b      	add	r3, r1
 80018ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018f0:	e00a      	b.n	8001908 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	4908      	ldr	r1, [pc, #32]	; (8001918 <__NVIC_SetPriority+0x50>)
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	f003 030f 	and.w	r3, r3, #15
 80018fe:	3b04      	subs	r3, #4
 8001900:	0112      	lsls	r2, r2, #4
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	440b      	add	r3, r1
 8001906:	761a      	strb	r2, [r3, #24]
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	e000e100 	.word	0xe000e100
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800191c:	b480      	push	{r7}
 800191e:	b089      	sub	sp, #36	; 0x24
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	f1c3 0307 	rsb	r3, r3, #7
 8001936:	2b04      	cmp	r3, #4
 8001938:	bf28      	it	cs
 800193a:	2304      	movcs	r3, #4
 800193c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	3304      	adds	r3, #4
 8001942:	2b06      	cmp	r3, #6
 8001944:	d902      	bls.n	800194c <NVIC_EncodePriority+0x30>
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	3b03      	subs	r3, #3
 800194a:	e000      	b.n	800194e <NVIC_EncodePriority+0x32>
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001950:	f04f 32ff 	mov.w	r2, #4294967295
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	43da      	mvns	r2, r3
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	401a      	ands	r2, r3
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001964:	f04f 31ff 	mov.w	r1, #4294967295
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	fa01 f303 	lsl.w	r3, r1, r3
 800196e:	43d9      	mvns	r1, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001974:	4313      	orrs	r3, r2
         );
}
 8001976:	4618      	mov	r0, r3
 8001978:	3724      	adds	r7, #36	; 0x24
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr

08001980 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3b01      	subs	r3, #1
 800198c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001990:	d301      	bcc.n	8001996 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001992:	2301      	movs	r3, #1
 8001994:	e00f      	b.n	80019b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001996:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <SysTick_Config+0x40>)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3b01      	subs	r3, #1
 800199c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800199e:	210f      	movs	r1, #15
 80019a0:	f04f 30ff 	mov.w	r0, #4294967295
 80019a4:	f7ff ff90 	bl	80018c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a8:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <SysTick_Config+0x40>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ae:	4b04      	ldr	r3, [pc, #16]	; (80019c0 <SysTick_Config+0x40>)
 80019b0:	2207      	movs	r2, #7
 80019b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	e000e010 	.word	0xe000e010

080019c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff ff2d 	bl	800182c <__NVIC_SetPriorityGrouping>
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019da:	b580      	push	{r7, lr}
 80019dc:	b086      	sub	sp, #24
 80019de:	af00      	add	r7, sp, #0
 80019e0:	4603      	mov	r3, r0
 80019e2:	60b9      	str	r1, [r7, #8]
 80019e4:	607a      	str	r2, [r7, #4]
 80019e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019ec:	f7ff ff42 	bl	8001874 <__NVIC_GetPriorityGrouping>
 80019f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	68b9      	ldr	r1, [r7, #8]
 80019f6:	6978      	ldr	r0, [r7, #20]
 80019f8:	f7ff ff90 	bl	800191c <NVIC_EncodePriority>
 80019fc:	4602      	mov	r2, r0
 80019fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a02:	4611      	mov	r1, r2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff ff5f 	bl	80018c8 <__NVIC_SetPriority>
}
 8001a0a:	bf00      	nop
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	4603      	mov	r3, r0
 8001a1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff35 	bl	8001890 <__NVIC_EnableIRQ>
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff ffa2 	bl	8001980 <SysTick_Config>
 8001a3c:	4603      	mov	r3, r0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b08b      	sub	sp, #44	; 0x2c
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a52:	2300      	movs	r3, #0
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a56:	2300      	movs	r3, #0
 8001a58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a5a:	e148      	b.n	8001cee <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	69fa      	ldr	r2, [r7, #28]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	f040 8137 	bne.w	8001ce8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	4aa3      	ldr	r2, [pc, #652]	; (8001d0c <HAL_GPIO_Init+0x2c4>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d05e      	beq.n	8001b42 <HAL_GPIO_Init+0xfa>
 8001a84:	4aa1      	ldr	r2, [pc, #644]	; (8001d0c <HAL_GPIO_Init+0x2c4>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d875      	bhi.n	8001b76 <HAL_GPIO_Init+0x12e>
 8001a8a:	4aa1      	ldr	r2, [pc, #644]	; (8001d10 <HAL_GPIO_Init+0x2c8>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d058      	beq.n	8001b42 <HAL_GPIO_Init+0xfa>
 8001a90:	4a9f      	ldr	r2, [pc, #636]	; (8001d10 <HAL_GPIO_Init+0x2c8>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d86f      	bhi.n	8001b76 <HAL_GPIO_Init+0x12e>
 8001a96:	4a9f      	ldr	r2, [pc, #636]	; (8001d14 <HAL_GPIO_Init+0x2cc>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d052      	beq.n	8001b42 <HAL_GPIO_Init+0xfa>
 8001a9c:	4a9d      	ldr	r2, [pc, #628]	; (8001d14 <HAL_GPIO_Init+0x2cc>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d869      	bhi.n	8001b76 <HAL_GPIO_Init+0x12e>
 8001aa2:	4a9d      	ldr	r2, [pc, #628]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d04c      	beq.n	8001b42 <HAL_GPIO_Init+0xfa>
 8001aa8:	4a9b      	ldr	r2, [pc, #620]	; (8001d18 <HAL_GPIO_Init+0x2d0>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d863      	bhi.n	8001b76 <HAL_GPIO_Init+0x12e>
 8001aae:	4a9b      	ldr	r2, [pc, #620]	; (8001d1c <HAL_GPIO_Init+0x2d4>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d046      	beq.n	8001b42 <HAL_GPIO_Init+0xfa>
 8001ab4:	4a99      	ldr	r2, [pc, #612]	; (8001d1c <HAL_GPIO_Init+0x2d4>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d85d      	bhi.n	8001b76 <HAL_GPIO_Init+0x12e>
 8001aba:	2b12      	cmp	r3, #18
 8001abc:	d82a      	bhi.n	8001b14 <HAL_GPIO_Init+0xcc>
 8001abe:	2b12      	cmp	r3, #18
 8001ac0:	d859      	bhi.n	8001b76 <HAL_GPIO_Init+0x12e>
 8001ac2:	a201      	add	r2, pc, #4	; (adr r2, 8001ac8 <HAL_GPIO_Init+0x80>)
 8001ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac8:	08001b43 	.word	0x08001b43
 8001acc:	08001b1d 	.word	0x08001b1d
 8001ad0:	08001b2f 	.word	0x08001b2f
 8001ad4:	08001b71 	.word	0x08001b71
 8001ad8:	08001b77 	.word	0x08001b77
 8001adc:	08001b77 	.word	0x08001b77
 8001ae0:	08001b77 	.word	0x08001b77
 8001ae4:	08001b77 	.word	0x08001b77
 8001ae8:	08001b77 	.word	0x08001b77
 8001aec:	08001b77 	.word	0x08001b77
 8001af0:	08001b77 	.word	0x08001b77
 8001af4:	08001b77 	.word	0x08001b77
 8001af8:	08001b77 	.word	0x08001b77
 8001afc:	08001b77 	.word	0x08001b77
 8001b00:	08001b77 	.word	0x08001b77
 8001b04:	08001b77 	.word	0x08001b77
 8001b08:	08001b77 	.word	0x08001b77
 8001b0c:	08001b25 	.word	0x08001b25
 8001b10:	08001b39 	.word	0x08001b39
 8001b14:	4a82      	ldr	r2, [pc, #520]	; (8001d20 <HAL_GPIO_Init+0x2d8>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d013      	beq.n	8001b42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b1a:	e02c      	b.n	8001b76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	623b      	str	r3, [r7, #32]
          break;
 8001b22:	e029      	b.n	8001b78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	3304      	adds	r3, #4
 8001b2a:	623b      	str	r3, [r7, #32]
          break;
 8001b2c:	e024      	b.n	8001b78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	3308      	adds	r3, #8
 8001b34:	623b      	str	r3, [r7, #32]
          break;
 8001b36:	e01f      	b.n	8001b78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	330c      	adds	r3, #12
 8001b3e:	623b      	str	r3, [r7, #32]
          break;
 8001b40:	e01a      	b.n	8001b78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d102      	bne.n	8001b50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b4a:	2304      	movs	r3, #4
 8001b4c:	623b      	str	r3, [r7, #32]
          break;
 8001b4e:	e013      	b.n	8001b78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d105      	bne.n	8001b64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b58:	2308      	movs	r3, #8
 8001b5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	69fa      	ldr	r2, [r7, #28]
 8001b60:	611a      	str	r2, [r3, #16]
          break;
 8001b62:	e009      	b.n	8001b78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b64:	2308      	movs	r3, #8
 8001b66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69fa      	ldr	r2, [r7, #28]
 8001b6c:	615a      	str	r2, [r3, #20]
          break;
 8001b6e:	e003      	b.n	8001b78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b70:	2300      	movs	r3, #0
 8001b72:	623b      	str	r3, [r7, #32]
          break;
 8001b74:	e000      	b.n	8001b78 <HAL_GPIO_Init+0x130>
          break;
 8001b76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	2bff      	cmp	r3, #255	; 0xff
 8001b7c:	d801      	bhi.n	8001b82 <HAL_GPIO_Init+0x13a>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	e001      	b.n	8001b86 <HAL_GPIO_Init+0x13e>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	3304      	adds	r3, #4
 8001b86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	2bff      	cmp	r3, #255	; 0xff
 8001b8c:	d802      	bhi.n	8001b94 <HAL_GPIO_Init+0x14c>
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	e002      	b.n	8001b9a <HAL_GPIO_Init+0x152>
 8001b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b96:	3b08      	subs	r3, #8
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	210f      	movs	r1, #15
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	401a      	ands	r2, r3
 8001bac:	6a39      	ldr	r1, [r7, #32]
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f000 8090 	beq.w	8001ce8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bc8:	4b56      	ldr	r3, [pc, #344]	; (8001d24 <HAL_GPIO_Init+0x2dc>)
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	4a55      	ldr	r2, [pc, #340]	; (8001d24 <HAL_GPIO_Init+0x2dc>)
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	6193      	str	r3, [r2, #24]
 8001bd4:	4b53      	ldr	r3, [pc, #332]	; (8001d24 <HAL_GPIO_Init+0x2dc>)
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	60bb      	str	r3, [r7, #8]
 8001bde:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001be0:	4a51      	ldr	r2, [pc, #324]	; (8001d28 <HAL_GPIO_Init+0x2e0>)
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	089b      	lsrs	r3, r3, #2
 8001be6:	3302      	adds	r3, #2
 8001be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	f003 0303 	and.w	r3, r3, #3
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	220f      	movs	r2, #15
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	4013      	ands	r3, r2
 8001c02:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a49      	ldr	r2, [pc, #292]	; (8001d2c <HAL_GPIO_Init+0x2e4>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d00d      	beq.n	8001c28 <HAL_GPIO_Init+0x1e0>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a48      	ldr	r2, [pc, #288]	; (8001d30 <HAL_GPIO_Init+0x2e8>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d007      	beq.n	8001c24 <HAL_GPIO_Init+0x1dc>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a47      	ldr	r2, [pc, #284]	; (8001d34 <HAL_GPIO_Init+0x2ec>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d101      	bne.n	8001c20 <HAL_GPIO_Init+0x1d8>
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	e004      	b.n	8001c2a <HAL_GPIO_Init+0x1e2>
 8001c20:	2303      	movs	r3, #3
 8001c22:	e002      	b.n	8001c2a <HAL_GPIO_Init+0x1e2>
 8001c24:	2301      	movs	r3, #1
 8001c26:	e000      	b.n	8001c2a <HAL_GPIO_Init+0x1e2>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c2c:	f002 0203 	and.w	r2, r2, #3
 8001c30:	0092      	lsls	r2, r2, #2
 8001c32:	4093      	lsls	r3, r2
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c3a:	493b      	ldr	r1, [pc, #236]	; (8001d28 <HAL_GPIO_Init+0x2e0>)
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	089b      	lsrs	r3, r3, #2
 8001c40:	3302      	adds	r3, #2
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d006      	beq.n	8001c62 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c54:	4b38      	ldr	r3, [pc, #224]	; (8001d38 <HAL_GPIO_Init+0x2f0>)
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	4937      	ldr	r1, [pc, #220]	; (8001d38 <HAL_GPIO_Init+0x2f0>)
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	608b      	str	r3, [r1, #8]
 8001c60:	e006      	b.n	8001c70 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c62:	4b35      	ldr	r3, [pc, #212]	; (8001d38 <HAL_GPIO_Init+0x2f0>)
 8001c64:	689a      	ldr	r2, [r3, #8]
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	4933      	ldr	r1, [pc, #204]	; (8001d38 <HAL_GPIO_Init+0x2f0>)
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d006      	beq.n	8001c8a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c7c:	4b2e      	ldr	r3, [pc, #184]	; (8001d38 <HAL_GPIO_Init+0x2f0>)
 8001c7e:	68da      	ldr	r2, [r3, #12]
 8001c80:	492d      	ldr	r1, [pc, #180]	; (8001d38 <HAL_GPIO_Init+0x2f0>)
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	60cb      	str	r3, [r1, #12]
 8001c88:	e006      	b.n	8001c98 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c8a:	4b2b      	ldr	r3, [pc, #172]	; (8001d38 <HAL_GPIO_Init+0x2f0>)
 8001c8c:	68da      	ldr	r2, [r3, #12]
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	43db      	mvns	r3, r3
 8001c92:	4929      	ldr	r1, [pc, #164]	; (8001d38 <HAL_GPIO_Init+0x2f0>)
 8001c94:	4013      	ands	r3, r2
 8001c96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d006      	beq.n	8001cb2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ca4:	4b24      	ldr	r3, [pc, #144]	; (8001d38 <HAL_GPIO_Init+0x2f0>)
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	4923      	ldr	r1, [pc, #140]	; (8001d38 <HAL_GPIO_Init+0x2f0>)
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	604b      	str	r3, [r1, #4]
 8001cb0:	e006      	b.n	8001cc0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cb2:	4b21      	ldr	r3, [pc, #132]	; (8001d38 <HAL_GPIO_Init+0x2f0>)
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	491f      	ldr	r1, [pc, #124]	; (8001d38 <HAL_GPIO_Init+0x2f0>)
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d006      	beq.n	8001cda <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ccc:	4b1a      	ldr	r3, [pc, #104]	; (8001d38 <HAL_GPIO_Init+0x2f0>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4919      	ldr	r1, [pc, #100]	; (8001d38 <HAL_GPIO_Init+0x2f0>)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	600b      	str	r3, [r1, #0]
 8001cd8:	e006      	b.n	8001ce8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cda:	4b17      	ldr	r3, [pc, #92]	; (8001d38 <HAL_GPIO_Init+0x2f0>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	4915      	ldr	r1, [pc, #84]	; (8001d38 <HAL_GPIO_Init+0x2f0>)
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	3301      	adds	r3, #1
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f47f aeaf 	bne.w	8001a5c <HAL_GPIO_Init+0x14>
  }
}
 8001cfe:	bf00      	nop
 8001d00:	bf00      	nop
 8001d02:	372c      	adds	r7, #44	; 0x2c
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	10320000 	.word	0x10320000
 8001d10:	10310000 	.word	0x10310000
 8001d14:	10220000 	.word	0x10220000
 8001d18:	10210000 	.word	0x10210000
 8001d1c:	10120000 	.word	0x10120000
 8001d20:	10110000 	.word	0x10110000
 8001d24:	40021000 	.word	0x40021000
 8001d28:	40010000 	.word	0x40010000
 8001d2c:	40010800 	.word	0x40010800
 8001d30:	40010c00 	.word	0x40010c00
 8001d34:	40011000 	.word	0x40011000
 8001d38:	40010400 	.word	0x40010400

08001d3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	460b      	mov	r3, r1
 8001d46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	887b      	ldrh	r3, [r7, #2]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d002      	beq.n	8001d5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d54:	2301      	movs	r3, #1
 8001d56:	73fb      	strb	r3, [r7, #15]
 8001d58:	e001      	b.n	8001d5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bc80      	pop	{r7}
 8001d68:	4770      	bx	lr

08001d6a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
 8001d72:	460b      	mov	r3, r1
 8001d74:	807b      	strh	r3, [r7, #2]
 8001d76:	4613      	mov	r3, r2
 8001d78:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d7a:	787b      	ldrb	r3, [r7, #1]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d80:	887a      	ldrh	r2, [r7, #2]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d86:	e003      	b.n	8001d90 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d88:	887b      	ldrh	r3, [r7, #2]
 8001d8a:	041a      	lsls	r2, r3, #16
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	611a      	str	r2, [r3, #16]
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc80      	pop	{r7}
 8001d98:	4770      	bx	lr

08001d9a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b085      	sub	sp, #20
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	460b      	mov	r3, r1
 8001da4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dac:	887a      	ldrh	r2, [r7, #2]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	4013      	ands	r3, r2
 8001db2:	041a      	lsls	r2, r3, #16
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	43d9      	mvns	r1, r3
 8001db8:	887b      	ldrh	r3, [r7, #2]
 8001dba:	400b      	ands	r3, r1
 8001dbc:	431a      	orrs	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	611a      	str	r2, [r3, #16]
}
 8001dc2:	bf00      	nop
 8001dc4:	3714      	adds	r7, #20
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bc80      	pop	{r7}
 8001dca:	4770      	bx	lr

08001dcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e26c      	b.n	80022b8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f000 8087 	beq.w	8001efa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dec:	4b92      	ldr	r3, [pc, #584]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 030c 	and.w	r3, r3, #12
 8001df4:	2b04      	cmp	r3, #4
 8001df6:	d00c      	beq.n	8001e12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001df8:	4b8f      	ldr	r3, [pc, #572]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 030c 	and.w	r3, r3, #12
 8001e00:	2b08      	cmp	r3, #8
 8001e02:	d112      	bne.n	8001e2a <HAL_RCC_OscConfig+0x5e>
 8001e04:	4b8c      	ldr	r3, [pc, #560]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e10:	d10b      	bne.n	8001e2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e12:	4b89      	ldr	r3, [pc, #548]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d06c      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x12c>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d168      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e246      	b.n	80022b8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e32:	d106      	bne.n	8001e42 <HAL_RCC_OscConfig+0x76>
 8001e34:	4b80      	ldr	r3, [pc, #512]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a7f      	ldr	r2, [pc, #508]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e3e:	6013      	str	r3, [r2, #0]
 8001e40:	e02e      	b.n	8001ea0 <HAL_RCC_OscConfig+0xd4>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10c      	bne.n	8001e64 <HAL_RCC_OscConfig+0x98>
 8001e4a:	4b7b      	ldr	r3, [pc, #492]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a7a      	ldr	r2, [pc, #488]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	4b78      	ldr	r3, [pc, #480]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a77      	ldr	r2, [pc, #476]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	e01d      	b.n	8001ea0 <HAL_RCC_OscConfig+0xd4>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e6c:	d10c      	bne.n	8001e88 <HAL_RCC_OscConfig+0xbc>
 8001e6e:	4b72      	ldr	r3, [pc, #456]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a71      	ldr	r2, [pc, #452]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e78:	6013      	str	r3, [r2, #0]
 8001e7a:	4b6f      	ldr	r3, [pc, #444]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a6e      	ldr	r2, [pc, #440]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e84:	6013      	str	r3, [r2, #0]
 8001e86:	e00b      	b.n	8001ea0 <HAL_RCC_OscConfig+0xd4>
 8001e88:	4b6b      	ldr	r3, [pc, #428]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a6a      	ldr	r2, [pc, #424]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e92:	6013      	str	r3, [r2, #0]
 8001e94:	4b68      	ldr	r3, [pc, #416]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a67      	ldr	r2, [pc, #412]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001e9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d013      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea8:	f7ff fcb6 	bl	8001818 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eb0:	f7ff fcb2 	bl	8001818 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b64      	cmp	r3, #100	; 0x64
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e1fa      	b.n	80022b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec2:	4b5d      	ldr	r3, [pc, #372]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d0f0      	beq.n	8001eb0 <HAL_RCC_OscConfig+0xe4>
 8001ece:	e014      	b.n	8001efa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed0:	f7ff fca2 	bl	8001818 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ed8:	f7ff fc9e 	bl	8001818 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b64      	cmp	r3, #100	; 0x64
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e1e6      	b.n	80022b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eea:	4b53      	ldr	r3, [pc, #332]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1f0      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x10c>
 8001ef6:	e000      	b.n	8001efa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d063      	beq.n	8001fce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f06:	4b4c      	ldr	r3, [pc, #304]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f003 030c 	and.w	r3, r3, #12
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00b      	beq.n	8001f2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f12:	4b49      	ldr	r3, [pc, #292]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f003 030c 	and.w	r3, r3, #12
 8001f1a:	2b08      	cmp	r3, #8
 8001f1c:	d11c      	bne.n	8001f58 <HAL_RCC_OscConfig+0x18c>
 8001f1e:	4b46      	ldr	r3, [pc, #280]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d116      	bne.n	8001f58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f2a:	4b43      	ldr	r3, [pc, #268]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d005      	beq.n	8001f42 <HAL_RCC_OscConfig+0x176>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d001      	beq.n	8001f42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e1ba      	b.n	80022b8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f42:	4b3d      	ldr	r3, [pc, #244]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	4939      	ldr	r1, [pc, #228]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f56:	e03a      	b.n	8001fce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d020      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f60:	4b36      	ldr	r3, [pc, #216]	; (800203c <HAL_RCC_OscConfig+0x270>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f66:	f7ff fc57 	bl	8001818 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f6e:	f7ff fc53 	bl	8001818 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e19b      	b.n	80022b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f80:	4b2d      	ldr	r3, [pc, #180]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0f0      	beq.n	8001f6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f8c:	4b2a      	ldr	r3, [pc, #168]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	4927      	ldr	r1, [pc, #156]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	600b      	str	r3, [r1, #0]
 8001fa0:	e015      	b.n	8001fce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fa2:	4b26      	ldr	r3, [pc, #152]	; (800203c <HAL_RCC_OscConfig+0x270>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa8:	f7ff fc36 	bl	8001818 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fb0:	f7ff fc32 	bl	8001818 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e17a      	b.n	80022b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fc2:	4b1d      	ldr	r3, [pc, #116]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1f0      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d03a      	beq.n	8002050 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d019      	beq.n	8002016 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fe2:	4b17      	ldr	r3, [pc, #92]	; (8002040 <HAL_RCC_OscConfig+0x274>)
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe8:	f7ff fc16 	bl	8001818 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ff0:	f7ff fc12 	bl	8001818 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e15a      	b.n	80022b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002002:	4b0d      	ldr	r3, [pc, #52]	; (8002038 <HAL_RCC_OscConfig+0x26c>)
 8002004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0f0      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800200e:	2001      	movs	r0, #1
 8002010:	f000 fa9a 	bl	8002548 <RCC_Delay>
 8002014:	e01c      	b.n	8002050 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002016:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <HAL_RCC_OscConfig+0x274>)
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800201c:	f7ff fbfc 	bl	8001818 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002022:	e00f      	b.n	8002044 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002024:	f7ff fbf8 	bl	8001818 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d908      	bls.n	8002044 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e140      	b.n	80022b8 <HAL_RCC_OscConfig+0x4ec>
 8002036:	bf00      	nop
 8002038:	40021000 	.word	0x40021000
 800203c:	42420000 	.word	0x42420000
 8002040:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002044:	4b9e      	ldr	r3, [pc, #632]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1e9      	bne.n	8002024 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 80a6 	beq.w	80021aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800205e:	2300      	movs	r3, #0
 8002060:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002062:	4b97      	ldr	r3, [pc, #604]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d10d      	bne.n	800208a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800206e:	4b94      	ldr	r3, [pc, #592]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	4a93      	ldr	r2, [pc, #588]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002078:	61d3      	str	r3, [r2, #28]
 800207a:	4b91      	ldr	r3, [pc, #580]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002082:	60bb      	str	r3, [r7, #8]
 8002084:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002086:	2301      	movs	r3, #1
 8002088:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208a:	4b8e      	ldr	r3, [pc, #568]	; (80022c4 <HAL_RCC_OscConfig+0x4f8>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002092:	2b00      	cmp	r3, #0
 8002094:	d118      	bne.n	80020c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002096:	4b8b      	ldr	r3, [pc, #556]	; (80022c4 <HAL_RCC_OscConfig+0x4f8>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a8a      	ldr	r2, [pc, #552]	; (80022c4 <HAL_RCC_OscConfig+0x4f8>)
 800209c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020a2:	f7ff fbb9 	bl	8001818 <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020aa:	f7ff fbb5 	bl	8001818 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b64      	cmp	r3, #100	; 0x64
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e0fd      	b.n	80022b8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020bc:	4b81      	ldr	r3, [pc, #516]	; (80022c4 <HAL_RCC_OscConfig+0x4f8>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0f0      	beq.n	80020aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d106      	bne.n	80020de <HAL_RCC_OscConfig+0x312>
 80020d0:	4b7b      	ldr	r3, [pc, #492]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	4a7a      	ldr	r2, [pc, #488]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 80020d6:	f043 0301 	orr.w	r3, r3, #1
 80020da:	6213      	str	r3, [r2, #32]
 80020dc:	e02d      	b.n	800213a <HAL_RCC_OscConfig+0x36e>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10c      	bne.n	8002100 <HAL_RCC_OscConfig+0x334>
 80020e6:	4b76      	ldr	r3, [pc, #472]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	4a75      	ldr	r2, [pc, #468]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 80020ec:	f023 0301 	bic.w	r3, r3, #1
 80020f0:	6213      	str	r3, [r2, #32]
 80020f2:	4b73      	ldr	r3, [pc, #460]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	4a72      	ldr	r2, [pc, #456]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 80020f8:	f023 0304 	bic.w	r3, r3, #4
 80020fc:	6213      	str	r3, [r2, #32]
 80020fe:	e01c      	b.n	800213a <HAL_RCC_OscConfig+0x36e>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	2b05      	cmp	r3, #5
 8002106:	d10c      	bne.n	8002122 <HAL_RCC_OscConfig+0x356>
 8002108:	4b6d      	ldr	r3, [pc, #436]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	4a6c      	ldr	r2, [pc, #432]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 800210e:	f043 0304 	orr.w	r3, r3, #4
 8002112:	6213      	str	r3, [r2, #32]
 8002114:	4b6a      	ldr	r3, [pc, #424]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	4a69      	ldr	r2, [pc, #420]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	6213      	str	r3, [r2, #32]
 8002120:	e00b      	b.n	800213a <HAL_RCC_OscConfig+0x36e>
 8002122:	4b67      	ldr	r3, [pc, #412]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	4a66      	ldr	r2, [pc, #408]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002128:	f023 0301 	bic.w	r3, r3, #1
 800212c:	6213      	str	r3, [r2, #32]
 800212e:	4b64      	ldr	r3, [pc, #400]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	4a63      	ldr	r2, [pc, #396]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002134:	f023 0304 	bic.w	r3, r3, #4
 8002138:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d015      	beq.n	800216e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002142:	f7ff fb69 	bl	8001818 <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002148:	e00a      	b.n	8002160 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800214a:	f7ff fb65 	bl	8001818 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	f241 3288 	movw	r2, #5000	; 0x1388
 8002158:	4293      	cmp	r3, r2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e0ab      	b.n	80022b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002160:	4b57      	ldr	r3, [pc, #348]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0ee      	beq.n	800214a <HAL_RCC_OscConfig+0x37e>
 800216c:	e014      	b.n	8002198 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216e:	f7ff fb53 	bl	8001818 <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002174:	e00a      	b.n	800218c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002176:	f7ff fb4f 	bl	8001818 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	f241 3288 	movw	r2, #5000	; 0x1388
 8002184:	4293      	cmp	r3, r2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e095      	b.n	80022b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800218c:	4b4c      	ldr	r3, [pc, #304]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1ee      	bne.n	8002176 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002198:	7dfb      	ldrb	r3, [r7, #23]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d105      	bne.n	80021aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800219e:	4b48      	ldr	r3, [pc, #288]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	4a47      	ldr	r2, [pc, #284]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 80021a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 8081 	beq.w	80022b6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021b4:	4b42      	ldr	r3, [pc, #264]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 030c 	and.w	r3, r3, #12
 80021bc:	2b08      	cmp	r3, #8
 80021be:	d061      	beq.n	8002284 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	69db      	ldr	r3, [r3, #28]
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d146      	bne.n	8002256 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c8:	4b3f      	ldr	r3, [pc, #252]	; (80022c8 <HAL_RCC_OscConfig+0x4fc>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ce:	f7ff fb23 	bl	8001818 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021d4:	e008      	b.n	80021e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d6:	f7ff fb1f 	bl	8001818 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e067      	b.n	80022b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021e8:	4b35      	ldr	r3, [pc, #212]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1f0      	bne.n	80021d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021fc:	d108      	bne.n	8002210 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021fe:	4b30      	ldr	r3, [pc, #192]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	492d      	ldr	r1, [pc, #180]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 800220c:	4313      	orrs	r3, r2
 800220e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002210:	4b2b      	ldr	r3, [pc, #172]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a19      	ldr	r1, [r3, #32]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002220:	430b      	orrs	r3, r1
 8002222:	4927      	ldr	r1, [pc, #156]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002224:	4313      	orrs	r3, r2
 8002226:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002228:	4b27      	ldr	r3, [pc, #156]	; (80022c8 <HAL_RCC_OscConfig+0x4fc>)
 800222a:	2201      	movs	r2, #1
 800222c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222e:	f7ff faf3 	bl	8001818 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002236:	f7ff faef 	bl	8001818 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e037      	b.n	80022b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002248:	4b1d      	ldr	r3, [pc, #116]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d0f0      	beq.n	8002236 <HAL_RCC_OscConfig+0x46a>
 8002254:	e02f      	b.n	80022b6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002256:	4b1c      	ldr	r3, [pc, #112]	; (80022c8 <HAL_RCC_OscConfig+0x4fc>)
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225c:	f7ff fadc 	bl	8001818 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002264:	f7ff fad8 	bl	8001818 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e020      	b.n	80022b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002276:	4b12      	ldr	r3, [pc, #72]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0x498>
 8002282:	e018      	b.n	80022b6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	69db      	ldr	r3, [r3, #28]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d101      	bne.n	8002290 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e013      	b.n	80022b8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002290:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <HAL_RCC_OscConfig+0x4f4>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d106      	bne.n	80022b2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d001      	beq.n	80022b6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e000      	b.n	80022b8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40007000 	.word	0x40007000
 80022c8:	42420060 	.word	0x42420060

080022cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e0d0      	b.n	8002482 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022e0:	4b6a      	ldr	r3, [pc, #424]	; (800248c <HAL_RCC_ClockConfig+0x1c0>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d910      	bls.n	8002310 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ee:	4b67      	ldr	r3, [pc, #412]	; (800248c <HAL_RCC_ClockConfig+0x1c0>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f023 0207 	bic.w	r2, r3, #7
 80022f6:	4965      	ldr	r1, [pc, #404]	; (800248c <HAL_RCC_ClockConfig+0x1c0>)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fe:	4b63      	ldr	r3, [pc, #396]	; (800248c <HAL_RCC_ClockConfig+0x1c0>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	429a      	cmp	r2, r3
 800230a:	d001      	beq.n	8002310 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e0b8      	b.n	8002482 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d020      	beq.n	800235e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b00      	cmp	r3, #0
 8002326:	d005      	beq.n	8002334 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002328:	4b59      	ldr	r3, [pc, #356]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	4a58      	ldr	r2, [pc, #352]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 800232e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002332:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	2b00      	cmp	r3, #0
 800233e:	d005      	beq.n	800234c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002340:	4b53      	ldr	r3, [pc, #332]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	4a52      	ldr	r2, [pc, #328]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 8002346:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800234a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800234c:	4b50      	ldr	r3, [pc, #320]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	494d      	ldr	r1, [pc, #308]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 800235a:	4313      	orrs	r3, r2
 800235c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	d040      	beq.n	80023ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d107      	bne.n	8002382 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002372:	4b47      	ldr	r3, [pc, #284]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d115      	bne.n	80023aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e07f      	b.n	8002482 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b02      	cmp	r3, #2
 8002388:	d107      	bne.n	800239a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800238a:	4b41      	ldr	r3, [pc, #260]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d109      	bne.n	80023aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e073      	b.n	8002482 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800239a:	4b3d      	ldr	r3, [pc, #244]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e06b      	b.n	8002482 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023aa:	4b39      	ldr	r3, [pc, #228]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f023 0203 	bic.w	r2, r3, #3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	4936      	ldr	r1, [pc, #216]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023bc:	f7ff fa2c 	bl	8001818 <HAL_GetTick>
 80023c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c2:	e00a      	b.n	80023da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023c4:	f7ff fa28 	bl	8001818 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e053      	b.n	8002482 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023da:	4b2d      	ldr	r3, [pc, #180]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f003 020c 	and.w	r2, r3, #12
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d1eb      	bne.n	80023c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023ec:	4b27      	ldr	r3, [pc, #156]	; (800248c <HAL_RCC_ClockConfig+0x1c0>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d210      	bcs.n	800241c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fa:	4b24      	ldr	r3, [pc, #144]	; (800248c <HAL_RCC_ClockConfig+0x1c0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f023 0207 	bic.w	r2, r3, #7
 8002402:	4922      	ldr	r1, [pc, #136]	; (800248c <HAL_RCC_ClockConfig+0x1c0>)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	4313      	orrs	r3, r2
 8002408:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800240a:	4b20      	ldr	r3, [pc, #128]	; (800248c <HAL_RCC_ClockConfig+0x1c0>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	429a      	cmp	r2, r3
 8002416:	d001      	beq.n	800241c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e032      	b.n	8002482 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b00      	cmp	r3, #0
 8002426:	d008      	beq.n	800243a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002428:	4b19      	ldr	r3, [pc, #100]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	4916      	ldr	r1, [pc, #88]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 8002436:	4313      	orrs	r3, r2
 8002438:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	2b00      	cmp	r3, #0
 8002444:	d009      	beq.n	800245a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002446:	4b12      	ldr	r3, [pc, #72]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	490e      	ldr	r1, [pc, #56]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 8002456:	4313      	orrs	r3, r2
 8002458:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800245a:	f000 f821 	bl	80024a0 <HAL_RCC_GetSysClockFreq>
 800245e:	4602      	mov	r2, r0
 8002460:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <HAL_RCC_ClockConfig+0x1c4>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	091b      	lsrs	r3, r3, #4
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	490a      	ldr	r1, [pc, #40]	; (8002494 <HAL_RCC_ClockConfig+0x1c8>)
 800246c:	5ccb      	ldrb	r3, [r1, r3]
 800246e:	fa22 f303 	lsr.w	r3, r2, r3
 8002472:	4a09      	ldr	r2, [pc, #36]	; (8002498 <HAL_RCC_ClockConfig+0x1cc>)
 8002474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002476:	4b09      	ldr	r3, [pc, #36]	; (800249c <HAL_RCC_ClockConfig+0x1d0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff f98a 	bl	8001794 <HAL_InitTick>

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40022000 	.word	0x40022000
 8002490:	40021000 	.word	0x40021000
 8002494:	08002dac 	.word	0x08002dac
 8002498:	20000088 	.word	0x20000088
 800249c:	2000008c 	.word	0x2000008c

080024a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b087      	sub	sp, #28
 80024a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	2300      	movs	r3, #0
 80024ac:	60bb      	str	r3, [r7, #8]
 80024ae:	2300      	movs	r3, #0
 80024b0:	617b      	str	r3, [r7, #20]
 80024b2:	2300      	movs	r3, #0
 80024b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024b6:	2300      	movs	r3, #0
 80024b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024ba:	4b1e      	ldr	r3, [pc, #120]	; (8002534 <HAL_RCC_GetSysClockFreq+0x94>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f003 030c 	and.w	r3, r3, #12
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	d002      	beq.n	80024d0 <HAL_RCC_GetSysClockFreq+0x30>
 80024ca:	2b08      	cmp	r3, #8
 80024cc:	d003      	beq.n	80024d6 <HAL_RCC_GetSysClockFreq+0x36>
 80024ce:	e027      	b.n	8002520 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024d0:	4b19      	ldr	r3, [pc, #100]	; (8002538 <HAL_RCC_GetSysClockFreq+0x98>)
 80024d2:	613b      	str	r3, [r7, #16]
      break;
 80024d4:	e027      	b.n	8002526 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	0c9b      	lsrs	r3, r3, #18
 80024da:	f003 030f 	and.w	r3, r3, #15
 80024de:	4a17      	ldr	r2, [pc, #92]	; (800253c <HAL_RCC_GetSysClockFreq+0x9c>)
 80024e0:	5cd3      	ldrb	r3, [r2, r3]
 80024e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d010      	beq.n	8002510 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024ee:	4b11      	ldr	r3, [pc, #68]	; (8002534 <HAL_RCC_GetSysClockFreq+0x94>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	0c5b      	lsrs	r3, r3, #17
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	4a11      	ldr	r2, [pc, #68]	; (8002540 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024fa:	5cd3      	ldrb	r3, [r2, r3]
 80024fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a0d      	ldr	r2, [pc, #52]	; (8002538 <HAL_RCC_GetSysClockFreq+0x98>)
 8002502:	fb02 f203 	mul.w	r2, r2, r3
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	fbb2 f3f3 	udiv	r3, r2, r3
 800250c:	617b      	str	r3, [r7, #20]
 800250e:	e004      	b.n	800251a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a0c      	ldr	r2, [pc, #48]	; (8002544 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002514:	fb02 f303 	mul.w	r3, r2, r3
 8002518:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	613b      	str	r3, [r7, #16]
      break;
 800251e:	e002      	b.n	8002526 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002520:	4b05      	ldr	r3, [pc, #20]	; (8002538 <HAL_RCC_GetSysClockFreq+0x98>)
 8002522:	613b      	str	r3, [r7, #16]
      break;
 8002524:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002526:	693b      	ldr	r3, [r7, #16]
}
 8002528:	4618      	mov	r0, r3
 800252a:	371c      	adds	r7, #28
 800252c:	46bd      	mov	sp, r7
 800252e:	bc80      	pop	{r7}
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	40021000 	.word	0x40021000
 8002538:	007a1200 	.word	0x007a1200
 800253c:	08002dbc 	.word	0x08002dbc
 8002540:	08002dcc 	.word	0x08002dcc
 8002544:	003d0900 	.word	0x003d0900

08002548 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002550:	4b0a      	ldr	r3, [pc, #40]	; (800257c <RCC_Delay+0x34>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a0a      	ldr	r2, [pc, #40]	; (8002580 <RCC_Delay+0x38>)
 8002556:	fba2 2303 	umull	r2, r3, r2, r3
 800255a:	0a5b      	lsrs	r3, r3, #9
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	fb02 f303 	mul.w	r3, r2, r3
 8002562:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002564:	bf00      	nop
  }
  while (Delay --);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	1e5a      	subs	r2, r3, #1
 800256a:	60fa      	str	r2, [r7, #12]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1f9      	bne.n	8002564 <RCC_Delay+0x1c>
}
 8002570:	bf00      	nop
 8002572:	bf00      	nop
 8002574:	3714      	adds	r7, #20
 8002576:	46bd      	mov	sp, r7
 8002578:	bc80      	pop	{r7}
 800257a:	4770      	bx	lr
 800257c:	20000088 	.word	0x20000088
 8002580:	10624dd3 	.word	0x10624dd3

08002584 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e041      	b.n	800261a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d106      	bne.n	80025b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7fe ff44 	bl	8001438 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2202      	movs	r2, #2
 80025b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3304      	adds	r3, #4
 80025c0:	4619      	mov	r1, r3
 80025c2:	4610      	mov	r0, r2
 80025c4:	f000 fa56 	bl	8002a74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
	...

08002624 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b01      	cmp	r3, #1
 8002636:	d001      	beq.n	800263c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e035      	b.n	80026a8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2202      	movs	r2, #2
 8002640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68da      	ldr	r2, [r3, #12]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f042 0201 	orr.w	r2, r2, #1
 8002652:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a16      	ldr	r2, [pc, #88]	; (80026b4 <HAL_TIM_Base_Start_IT+0x90>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d009      	beq.n	8002672 <HAL_TIM_Base_Start_IT+0x4e>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002666:	d004      	beq.n	8002672 <HAL_TIM_Base_Start_IT+0x4e>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a12      	ldr	r2, [pc, #72]	; (80026b8 <HAL_TIM_Base_Start_IT+0x94>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d111      	bne.n	8002696 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2b06      	cmp	r3, #6
 8002682:	d010      	beq.n	80026a6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 0201 	orr.w	r2, r2, #1
 8002692:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002694:	e007      	b.n	80026a6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f042 0201 	orr.w	r2, r2, #1
 80026a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3714      	adds	r7, #20
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bc80      	pop	{r7}
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	40012c00 	.word	0x40012c00
 80026b8:	40000400 	.word	0x40000400

080026bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d020      	beq.n	8002720 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d01b      	beq.n	8002720 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f06f 0202 	mvn.w	r2, #2
 80026f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f998 	bl	8002a3c <HAL_TIM_IC_CaptureCallback>
 800270c:	e005      	b.n	800271a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f98b 	bl	8002a2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 f99a 	bl	8002a4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	f003 0304 	and.w	r3, r3, #4
 8002726:	2b00      	cmp	r3, #0
 8002728:	d020      	beq.n	800276c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b00      	cmp	r3, #0
 8002732:	d01b      	beq.n	800276c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f06f 0204 	mvn.w	r2, #4
 800273c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2202      	movs	r2, #2
 8002742:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 f972 	bl	8002a3c <HAL_TIM_IC_CaptureCallback>
 8002758:	e005      	b.n	8002766 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f965 	bl	8002a2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 f974 	bl	8002a4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	f003 0308 	and.w	r3, r3, #8
 8002772:	2b00      	cmp	r3, #0
 8002774:	d020      	beq.n	80027b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f003 0308 	and.w	r3, r3, #8
 800277c:	2b00      	cmp	r3, #0
 800277e:	d01b      	beq.n	80027b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f06f 0208 	mvn.w	r2, #8
 8002788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2204      	movs	r2, #4
 800278e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 f94c 	bl	8002a3c <HAL_TIM_IC_CaptureCallback>
 80027a4:	e005      	b.n	80027b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f93f 	bl	8002a2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 f94e 	bl	8002a4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	f003 0310 	and.w	r3, r3, #16
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d020      	beq.n	8002804 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f003 0310 	and.w	r3, r3, #16
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d01b      	beq.n	8002804 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f06f 0210 	mvn.w	r2, #16
 80027d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2208      	movs	r2, #8
 80027da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f926 	bl	8002a3c <HAL_TIM_IC_CaptureCallback>
 80027f0:	e005      	b.n	80027fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 f919 	bl	8002a2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 f928 	bl	8002a4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00c      	beq.n	8002828 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	2b00      	cmp	r3, #0
 8002816:	d007      	beq.n	8002828 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f06f 0201 	mvn.w	r2, #1
 8002820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7fe fc4c 	bl	80010c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00c      	beq.n	800284c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002838:	2b00      	cmp	r3, #0
 800283a:	d007      	beq.n	800284c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 fa6f 	bl	8002d2a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00c      	beq.n	8002870 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800285c:	2b00      	cmp	r3, #0
 800285e:	d007      	beq.n	8002870 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 f8f8 	bl	8002a60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	f003 0320 	and.w	r3, r3, #32
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00c      	beq.n	8002894 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f003 0320 	and.w	r3, r3, #32
 8002880:	2b00      	cmp	r3, #0
 8002882:	d007      	beq.n	8002894 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f06f 0220 	mvn.w	r2, #32
 800288c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 fa42 	bl	8002d18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002894:	bf00      	nop
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028a6:	2300      	movs	r3, #0
 80028a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d101      	bne.n	80028b8 <HAL_TIM_ConfigClockSource+0x1c>
 80028b4:	2302      	movs	r3, #2
 80028b6:	e0b4      	b.n	8002a22 <HAL_TIM_ConfigClockSource+0x186>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2202      	movs	r2, #2
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80028d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68ba      	ldr	r2, [r7, #8]
 80028e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028f0:	d03e      	beq.n	8002970 <HAL_TIM_ConfigClockSource+0xd4>
 80028f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028f6:	f200 8087 	bhi.w	8002a08 <HAL_TIM_ConfigClockSource+0x16c>
 80028fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028fe:	f000 8086 	beq.w	8002a0e <HAL_TIM_ConfigClockSource+0x172>
 8002902:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002906:	d87f      	bhi.n	8002a08 <HAL_TIM_ConfigClockSource+0x16c>
 8002908:	2b70      	cmp	r3, #112	; 0x70
 800290a:	d01a      	beq.n	8002942 <HAL_TIM_ConfigClockSource+0xa6>
 800290c:	2b70      	cmp	r3, #112	; 0x70
 800290e:	d87b      	bhi.n	8002a08 <HAL_TIM_ConfigClockSource+0x16c>
 8002910:	2b60      	cmp	r3, #96	; 0x60
 8002912:	d050      	beq.n	80029b6 <HAL_TIM_ConfigClockSource+0x11a>
 8002914:	2b60      	cmp	r3, #96	; 0x60
 8002916:	d877      	bhi.n	8002a08 <HAL_TIM_ConfigClockSource+0x16c>
 8002918:	2b50      	cmp	r3, #80	; 0x50
 800291a:	d03c      	beq.n	8002996 <HAL_TIM_ConfigClockSource+0xfa>
 800291c:	2b50      	cmp	r3, #80	; 0x50
 800291e:	d873      	bhi.n	8002a08 <HAL_TIM_ConfigClockSource+0x16c>
 8002920:	2b40      	cmp	r3, #64	; 0x40
 8002922:	d058      	beq.n	80029d6 <HAL_TIM_ConfigClockSource+0x13a>
 8002924:	2b40      	cmp	r3, #64	; 0x40
 8002926:	d86f      	bhi.n	8002a08 <HAL_TIM_ConfigClockSource+0x16c>
 8002928:	2b30      	cmp	r3, #48	; 0x30
 800292a:	d064      	beq.n	80029f6 <HAL_TIM_ConfigClockSource+0x15a>
 800292c:	2b30      	cmp	r3, #48	; 0x30
 800292e:	d86b      	bhi.n	8002a08 <HAL_TIM_ConfigClockSource+0x16c>
 8002930:	2b20      	cmp	r3, #32
 8002932:	d060      	beq.n	80029f6 <HAL_TIM_ConfigClockSource+0x15a>
 8002934:	2b20      	cmp	r3, #32
 8002936:	d867      	bhi.n	8002a08 <HAL_TIM_ConfigClockSource+0x16c>
 8002938:	2b00      	cmp	r3, #0
 800293a:	d05c      	beq.n	80029f6 <HAL_TIM_ConfigClockSource+0x15a>
 800293c:	2b10      	cmp	r3, #16
 800293e:	d05a      	beq.n	80029f6 <HAL_TIM_ConfigClockSource+0x15a>
 8002940:	e062      	b.n	8002a08 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6818      	ldr	r0, [r3, #0]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	6899      	ldr	r1, [r3, #8]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	f000 f96a 	bl	8002c2a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002964:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	609a      	str	r2, [r3, #8]
      break;
 800296e:	e04f      	b.n	8002a10 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6818      	ldr	r0, [r3, #0]
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	6899      	ldr	r1, [r3, #8]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f000 f953 	bl	8002c2a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689a      	ldr	r2, [r3, #8]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002992:	609a      	str	r2, [r3, #8]
      break;
 8002994:	e03c      	b.n	8002a10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	6859      	ldr	r1, [r3, #4]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	461a      	mov	r2, r3
 80029a4:	f000 f8ca 	bl	8002b3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2150      	movs	r1, #80	; 0x50
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 f921 	bl	8002bf6 <TIM_ITRx_SetConfig>
      break;
 80029b4:	e02c      	b.n	8002a10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6818      	ldr	r0, [r3, #0]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	6859      	ldr	r1, [r3, #4]
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	461a      	mov	r2, r3
 80029c4:	f000 f8e8 	bl	8002b98 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2160      	movs	r1, #96	; 0x60
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 f911 	bl	8002bf6 <TIM_ITRx_SetConfig>
      break;
 80029d4:	e01c      	b.n	8002a10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6818      	ldr	r0, [r3, #0]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	6859      	ldr	r1, [r3, #4]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	461a      	mov	r2, r3
 80029e4:	f000 f8aa 	bl	8002b3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2140      	movs	r1, #64	; 0x40
 80029ee:	4618      	mov	r0, r3
 80029f0:	f000 f901 	bl	8002bf6 <TIM_ITRx_SetConfig>
      break;
 80029f4:	e00c      	b.n	8002a10 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4619      	mov	r1, r3
 8002a00:	4610      	mov	r0, r2
 8002a02:	f000 f8f8 	bl	8002bf6 <TIM_ITRx_SetConfig>
      break;
 8002a06:	e003      	b.n	8002a10 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a0c:	e000      	b.n	8002a10 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr

08002a3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr

08002a4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr

08002a60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr
	...

08002a74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a2b      	ldr	r2, [pc, #172]	; (8002b34 <TIM_Base_SetConfig+0xc0>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d007      	beq.n	8002a9c <TIM_Base_SetConfig+0x28>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a92:	d003      	beq.n	8002a9c <TIM_Base_SetConfig+0x28>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a28      	ldr	r2, [pc, #160]	; (8002b38 <TIM_Base_SetConfig+0xc4>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d108      	bne.n	8002aae <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a20      	ldr	r2, [pc, #128]	; (8002b34 <TIM_Base_SetConfig+0xc0>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d007      	beq.n	8002ac6 <TIM_Base_SetConfig+0x52>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002abc:	d003      	beq.n	8002ac6 <TIM_Base_SetConfig+0x52>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a1d      	ldr	r2, [pc, #116]	; (8002b38 <TIM_Base_SetConfig+0xc4>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d108      	bne.n	8002ad8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002acc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a0d      	ldr	r2, [pc, #52]	; (8002b34 <TIM_Base_SetConfig+0xc0>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d103      	bne.n	8002b0c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	691a      	ldr	r2, [r3, #16]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d005      	beq.n	8002b2a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	f023 0201 	bic.w	r2, r3, #1
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	611a      	str	r2, [r3, #16]
  }
}
 8002b2a:	bf00      	nop
 8002b2c:	3714      	adds	r7, #20
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr
 8002b34:	40012c00 	.word	0x40012c00
 8002b38:	40000400 	.word	0x40000400

08002b3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b087      	sub	sp, #28
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	f023 0201 	bic.w	r2, r3, #1
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	f023 030a 	bic.w	r3, r3, #10
 8002b78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	621a      	str	r2, [r3, #32]
}
 8002b8e:	bf00      	nop
 8002b90:	371c      	adds	r7, #28
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr

08002b98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b087      	sub	sp, #28
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	f023 0210 	bic.w	r2, r3, #16
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	031b      	lsls	r3, r3, #12
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002bd4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	011b      	lsls	r3, r3, #4
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	621a      	str	r2, [r3, #32]
}
 8002bec:	bf00      	nop
 8002bee:	371c      	adds	r7, #28
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bc80      	pop	{r7}
 8002bf4:	4770      	bx	lr

08002bf6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b085      	sub	sp, #20
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
 8002bfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	f043 0307 	orr.w	r3, r3, #7
 8002c18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	609a      	str	r2, [r3, #8]
}
 8002c20:	bf00      	nop
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bc80      	pop	{r7}
 8002c28:	4770      	bx	lr

08002c2a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b087      	sub	sp, #28
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	60f8      	str	r0, [r7, #12]
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	607a      	str	r2, [r7, #4]
 8002c36:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c44:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	021a      	lsls	r2, r3, #8
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	609a      	str	r2, [r3, #8]
}
 8002c5e:	bf00      	nop
 8002c60:	371c      	adds	r7, #28
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr

08002c68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d101      	bne.n	8002c80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	e041      	b.n	8002d04 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ca6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a14      	ldr	r2, [pc, #80]	; (8002d10 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d009      	beq.n	8002cd8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ccc:	d004      	beq.n	8002cd8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a10      	ldr	r2, [pc, #64]	; (8002d14 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d10c      	bne.n	8002cf2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cde:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68ba      	ldr	r2, [r7, #8]
 8002cf0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	40012c00 	.word	0x40012c00
 8002d14:	40000400 	.word	0x40000400

08002d18 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bc80      	pop	{r7}
 8002d28:	4770      	bx	lr

08002d2a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr

08002d3c <__libc_init_array>:
 8002d3c:	b570      	push	{r4, r5, r6, lr}
 8002d3e:	2600      	movs	r6, #0
 8002d40:	4d0c      	ldr	r5, [pc, #48]	; (8002d74 <__libc_init_array+0x38>)
 8002d42:	4c0d      	ldr	r4, [pc, #52]	; (8002d78 <__libc_init_array+0x3c>)
 8002d44:	1b64      	subs	r4, r4, r5
 8002d46:	10a4      	asrs	r4, r4, #2
 8002d48:	42a6      	cmp	r6, r4
 8002d4a:	d109      	bne.n	8002d60 <__libc_init_array+0x24>
 8002d4c:	f000 f822 	bl	8002d94 <_init>
 8002d50:	2600      	movs	r6, #0
 8002d52:	4d0a      	ldr	r5, [pc, #40]	; (8002d7c <__libc_init_array+0x40>)
 8002d54:	4c0a      	ldr	r4, [pc, #40]	; (8002d80 <__libc_init_array+0x44>)
 8002d56:	1b64      	subs	r4, r4, r5
 8002d58:	10a4      	asrs	r4, r4, #2
 8002d5a:	42a6      	cmp	r6, r4
 8002d5c:	d105      	bne.n	8002d6a <__libc_init_array+0x2e>
 8002d5e:	bd70      	pop	{r4, r5, r6, pc}
 8002d60:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d64:	4798      	blx	r3
 8002d66:	3601      	adds	r6, #1
 8002d68:	e7ee      	b.n	8002d48 <__libc_init_array+0xc>
 8002d6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d6e:	4798      	blx	r3
 8002d70:	3601      	adds	r6, #1
 8002d72:	e7f2      	b.n	8002d5a <__libc_init_array+0x1e>
 8002d74:	08002dd0 	.word	0x08002dd0
 8002d78:	08002dd0 	.word	0x08002dd0
 8002d7c:	08002dd0 	.word	0x08002dd0
 8002d80:	08002dd4 	.word	0x08002dd4

08002d84 <memset>:
 8002d84:	4603      	mov	r3, r0
 8002d86:	4402      	add	r2, r0
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d100      	bne.n	8002d8e <memset+0xa>
 8002d8c:	4770      	bx	lr
 8002d8e:	f803 1b01 	strb.w	r1, [r3], #1
 8002d92:	e7f9      	b.n	8002d88 <memset+0x4>

08002d94 <_init>:
 8002d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d96:	bf00      	nop
 8002d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d9a:	bc08      	pop	{r3}
 8002d9c:	469e      	mov	lr, r3
 8002d9e:	4770      	bx	lr

08002da0 <_fini>:
 8002da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002da2:	bf00      	nop
 8002da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002da6:	bc08      	pop	{r3}
 8002da8:	469e      	mov	lr, r3
 8002daa:	4770      	bx	lr
